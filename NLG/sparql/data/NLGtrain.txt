
 Q: the liberal arts college that is affiliated with columbia university is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'affiliated with', 'o': 'columbia university', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'liberal arts college'}}
 TEMPLATE: <?S P O ; ?S InstanceOf Type>

 Q: the mineral variety that starts with the letter z is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'mineral variety'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'starts_with', 'o': 'z'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; starts with character >

 Q: the developer of stirling engine who was died in galston is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': 'stirling engine', 'p': 'developer', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'died in', 'o': 'galston'}}
 TEMPLATE: E REF ?F . ?F RFG G

 Q: the uppslagsverket finland id of kickboxing is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'kickboxing', 'p': 'uppslagsverket finland id', 'o': 'Answer'}
 TEMPLATE: E REF ?F

 Q: the religious affiliation of ethnicity sirhan sirhan is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'religious affiliation', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'sirhan sirhan', 'p': 'ethnicity', 'o': '$y0'}}
 TEMPLATE: E REF xF . xF RFG ?G

 Q: the facet of a polytope of shape of six-sided die is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'facet of a polytope', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'six-sided die', 'p': 'shape', 'o': '$y0'}}
 TEMPLATE: C RCD xD . xD RDE ?E

 Q: the mountain which has a tallest elevation above sea level is Answer
 SPARQL: lol
 ALIST: {'h': 'max', 'v': '$y0', 's': 'Answer', 'p': 'elevation above sea level', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'mountain'}}
 TEMPLATE: ?E is_a Type, ?E pred Obj  value. MAX/MIN (value)

 Q: the native language of modern standard arabic is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'native language', 'o': 'modern standard arabic'}
 TEMPLATE: ?D RDE E

 Q: the powerplant of steam turbine is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'powerplant', 'o': 'steam turbine'}
 TEMPLATE: ?D RDE E

 Q: there are Answer records held by pole vault
 SPARQL: lol
 ALIST: {'h': 'count', 'v': 'Answer', 's': 'Answer', 'p': 'record held', 'o': 'pole vault'}
 TEMPLATE: Count ent (ent-pred-obj)

 Q: the player that participated in barbora spotakova is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'player', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'barbora spotakova', 'p': 'participated in', 'o': '$y0'}}
 TEMPLATE: E REF xF . xF RFG ?G

 Q: the spacecraft that is manufactured by spacex is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'manufactured by', 'o': 'spacex', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'spacecraft'}}
 TEMPLATE: <?S P O ; ?S InstanceOf Type>

 Q: the nonprofit organization which has the highest total expenditure is Answer
 SPARQL: lol
 ALIST: {'h': 'max', 'v': '$y0', 's': 'Answer', 'p': 'total expenditure', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'nonprofit organization'}}
 TEMPLATE: ?E is_a Type, ?E pred Obj  value. MAX/MIN (value)

 Q: it is Answer that the cash of the delta air lines is more than 2313600000.0
 SPARQL: lol
 ALIST: {'h': 'greater', 'v': 'Answer', 's': 'delta air lines', 'p': 'cash', 'o': 'Answer', 'Answer': '2313600000.0'}
 TEMPLATE: ASK ?sbj ?pred ?obj filter ?obj = num

 Q: the business with lyon as location of headquarters is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'headquarters location', 'o': 'lyon', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'business'}}
 TEMPLATE: <?S P O ; ?S InstanceOf Type>

 Q: the location of multnomah falls is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'multnomah falls', 'p': 'location', 'o': 'Answer'}
 TEMPLATE: E REF ?F

 Q: the rank of the taxon parent of physalis philadelphica is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'rank', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'physalis philadelphica', 'p': 'taxon parent', 'o': '$y0'}}
 TEMPLATE: E REF xF . xF RFG ?G

 Q: the image compression contains the word graphics in its name is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'image compression'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'contains', 'o': 'graphics'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; contains word >

 Q: the spacecraft with the lowest orbits completed is Answer
 SPARQL: lol
 ALIST: {'h': 'min', 'v': '$y0', 's': 'Answer', 'p': 'orbits completed', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'spacecraft'}}
 TEMPLATE: ?E is_a Type. ?E pred Obj. ?E-secondClause value. MIN (value)

 Q: the item used of coincident with human body is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'used', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'human body', 'p': 'coincident with', 'o': '$y0'}}
 TEMPLATE: E REF xF . xF RFG ?G

 Q: the taxon which has the highest chromosome count is Answer
 SPARQL: lol
 ALIST: {'h': 'max', 'v': '$y0', 's': 'Answer', 'p': 'chromosome count', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'taxon'}}
 TEMPLATE: ?E is_a Type, ?E pred Obj  value. MAX/MIN (value)

 Q: the belt sander model with the minpower consumed whose subclass of is power tool is Answer
 SPARQL: lol
 ALIST: {'h': 'min', 'v': '$y0', 's': 'Answer', 'p': 'power consumed', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'belt sander model', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'subclass of', 'o': 'power tool'}}}
 TEMPLATE: ?E is_a Type. ?E pred Obj. ?E-secondClause value. MIN (value)

 Q: the written work whose name has the word war in it is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'written work'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'contains', 'o': 'war'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; contains word >

 Q: the key incident in the provenance of glencore is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'key incident', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'glencore', 'p': 'provenance', 'o': '$y0'}}
 TEMPLATE: E REF xF . xF RFG ?G

 Q: the caf champions league which has the highest number of points/goals/set scored is Answer
 SPARQL: lol
 ALIST: {'h': 'max', 'v': '$y0', 's': 'Answer', 'p': 'number of points/goals/set scored', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'caf champions league'}}
 TEMPLATE: ?E is_a Type, ?E pred Obj  value. MAX/MIN (value)

 Q: the sahra heritage site id of university of cape town is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'university of cape town', 'p': 'sahra heritage site id', 'o': 'Answer'}
 TEMPLATE: E REF ?F

 Q: it is Answer that the literate population of dharampur equals 0
 SPARQL: lol
 ALIST: {'h': 'equal', 'v': 'Answer', 's': 'dharampur', 'p': 'literate population', 'o': 'Answer', 'Answer': '0'}
 TEMPLATE: ASK ?sbj ?pred ?obj filter ?obj = num

 Q: the theatrical character for characters of hamlet is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'hamlet', 'p': 'characters', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'theatrical character'}}
 TEMPLATE: <S P ?O ; ?O instanceOf Type>

 Q: the people whose doctoral student is niels bohr is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'doctoral student', 'o': 'niels bohr', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'human'}}
 TEMPLATE: <?S P O ; ?S InstanceOf Type>

 Q: in 1944 the spouse of simone signoret is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': 'simone signoret', 'p': 'spouse', 'o': 'Answer', 't': '1944'}
 TEMPLATE: (E pred F) prop ?value

 Q: it is Answer that the beats per minute of the colorless aura equal to 50
 SPARQL: lol
 ALIST: {'h': 'equal', 'v': 'Answer', 's': 'colorless aura', 'p': 'beats per minute', 'o': 'Answer', 'Answer': '50'}
 TEMPLATE: ASK ?sbj ?pred ?obj filter ?obj = num

 Q: there are Answer collection are done by museo soumaya
 SPARQL: lol
 ALIST: {'h': 'count', 'v': 'Answer', 's': 'Answer', 'p': 'collection', 'o': 'museo soumaya'}
 TEMPLATE: Count ent (ent-pred-obj)

 Q: the award keanu reeves received, which was also won by sandra bullock, is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'award', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'keanu reeves', 'p': 'award', 'o': '$y0', '$y0': {'h': 'value', 'v': '$y0', 's': '$y0', 'p': 'won by', 'o': 'sandra bullock'}}}
 TEMPLATE: (E pred F) prop ?value

 Q: the award received by harry martinson together with eyvind johnson is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'award', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'harry martinson', 'p': 'award', 'o': '$y0', '$y0': {'h': 'value', 'v': '$y0', 's': '$y0', 'p': 'together with', 'o': 'eyvind johnson'}}}
 TEMPLATE: (E pred F) prop ?value

 Q: the forensic technique starts with d is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'forensic technique'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'starts_with', 'o': 'd'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; starts with character >

 Q: the desired outcome of remake of half moon replica is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'desired outcome', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'half moon replica', 'p': 'remake of', 'o': '$y0'}}
 TEMPLATE: C RCD xD . xD RDE ?E

 Q: atacama region had the population of 230873.0 in Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': '$y0', 's': 'atacama region', 'p': 'population', 'o': '$y0', '$y0': {'h': 'value', 'v': '$y0', 's': '$y0', 'p': 'population', 'o': '230873.0'}, 't': 'Answer'}
 TEMPLATE: (E pred ?Obj ) prop value

 Q: the particle radiation that contains the word cosmic in its name is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'particle radiation'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'contains', 'o': 'cosmic'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; contains word >

 Q: there are Answer designed by isambard kingdom brunel
 SPARQL: lol
 ALIST: {'h': 'count', 'v': 'Answer', 's': 'Answer', 'p': 'designed by', 'o': 'isambard kingdom brunel'}
 TEMPLATE: Count ent (ent-pred-obj)

 Q: there are Answer awards are given by the academic franchise
 SPARQL: lol
 ALIST: {'h': 'count', 'v': 'Answer', 's': 'Answer', 'p': 'given by', 'o': 'academic franchise'}
 TEMPLATE: Count ent (ent-pred-obj)

 Q: it is Answer that the diameter pf nickel equal to 0.807
 SPARQL: lol
 ALIST: {'h': 'equal', 'v': 'Answer', 's': 'nickel', 'p': 'diameter', 'o': 'Answer', 'Answer': '0.807'}
 TEMPLATE: ASK ?sbj ?pred ?obj filter ?obj = num

 Q: the statement which is subject of emigration is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'statement is subject of', 'o': 'emigration'}
 TEMPLATE: ?D RDE E

 Q: the destination point of franz josef land is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'destination point', 'o': 'franz josef land'}
 TEMPLATE: ?D RDE E

 Q: the academic major which start with the letter t is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'academic major'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'starts_with', 'o': 't'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; starts with character >

 Q: the painting of coat of arms of overbetuwe is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'painting of', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'overbetuwe', 'p': 'coat of arms', 'o': '$y0'}}
 TEMPLATE: C RCD xD . xD RDE ?E

 Q: there are Answer payment types accepted are money
 SPARQL: lol
 ALIST: {'h': 'count', 'v': 'Answer', 's': 'Answer', 'p': 'payment types accepted', 'o': 'money'}
 TEMPLATE: Count ent (ent-pred-obj)

 Q: Answer is unit of density for measured by of density
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'density', 'p': 'measured by', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'unit of density'}}
 TEMPLATE: <S P ?O ; ?O instanceOf Type>

 Q: the religious text followed by exodus is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'followed by', 'o': 'exodus', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'religious text'}}
 TEMPLATE: <?S P O ; ?S InstanceOf Type>

 Q: it is Answer that the bore mitsubishi kinsei equal to 140
 SPARQL: lol
 ALIST: {'h': 'equal', 'v': 'Answer', 's': 'kinsei', 'p': 'bore', 'o': 'Answer', 'Answer': '140'}
 TEMPLATE: ASK ?sbj ?pred ?obj filter ?obj = num

 Q: the horse breed whose name starts with the letter z is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'horse breed'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'starts_with', 'o': 'z'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; starts with character >

 Q: the crossref funder id of the national museum of american history is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'national museum of american history', 'p': 'crossref funder id', 'o': 'Answer'}
 TEMPLATE: E REF ?F

 Q: the general manager of the chicago cubs is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'chicago cubs', 'p': 'general manager', 'o': 'Answer'}
 TEMPLATE: E REF ?F

 Q: the writer of julius caesar who has a sister named joan shakespeare is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': 'julius caesar', 'p': 'writer', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'sister', 'o': 'joan shakespeare'}}
 TEMPLATE: E REF ?F . ?F RFG G

 Q: the medal for award received of angela lansbury is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'angela lansbury', 'p': 'award received', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'medal'}}
 TEMPLATE: <S P ?O ; ?O instanceOf Type>

 Q: the earthquake from china with the maxearthquake magnitude on the richter magnitude scale is Answer
 SPARQL: lol
 ALIST: {'h': 'max', 'v': '$y0', 's': 'Answer', 'p': 'earthquake magnitude on the richter magnitude scale', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'earthquake', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'country', 'o': 'china'}}}
 TEMPLATE: ?E is_a Type. ?E pred Obj. ?E-secondClause value. MAX (value)

 Q: the author of afterword of erich fromm is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'author of afterword', 'o': 'erich fromm'}
 TEMPLATE: ?D RDE E

 Q: the intergovernmental organization whose name starts with s is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'intergovernmental organization'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'starts_with', 'o': 's'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; starts with character >

 Q: the uci proteam which has the highest budget is Answer
 SPARQL: lol
 ALIST: {'h': 'max', 'v': '$y0', 's': 'Answer', 'p': 'budget', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'uci proteam'}}
 TEMPLATE: ?E is_a Type, ?E pred Obj  value. MAX/MIN (value)

 Q: the country which has highest individual tax rate is Answer
 SPARQL: lol
 ALIST: {'h': 'max', 'v': '$y0', 's': 'Answer', 'p': 'individual tax rate', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'country'}}
 TEMPLATE: ?E is_a Type, ?E pred Obj  value. MAX/MIN (value)

 Q: the gacs id of west africa is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'west africa', 'p': 'gacs id', 'o': 'Answer'}
 TEMPLATE: E REF ?F

 Q: the prequel of phase of matter of galinstan is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'prequel of', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'galinstan', 'p': 'phase of matter', 'o': '$y0'}}
 TEMPLATE: E REF xF . xF RFG ?G

 Q: the cpi inflation rate of the endemic of the indian cuisine is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'inflation rate', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'indian cuisine', 'p': 'endemic to', 'o': '$y0'}}
 TEMPLATE: E REF xF . xF RFG ?G

 Q: the star which has the highest proper motion is Answer
 SPARQL: lol
 ALIST: {'h': 'max', 'v': '$y0', 's': 'Answer', 'p': 'proper motion', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'star'}}
 TEMPLATE: ?E is_a Type, ?E pred Obj  value. MAX/MIN (value)

 Q: the war cemetery has the least memorial based burials is Answer
 SPARQL: lol
 ALIST: {'h': 'min', 'v': '$y0', 's': 'Answer', 'p': 'burials', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'war cemetery', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'memorial'}}}
 TEMPLATE: ?E is_a Type. ?E pred Obj. ?E-secondClause value. MIN (value)

 Q: the intended public of young adult is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'intended public', 'o': 'young adult'}
 TEMPLATE: ?D RDE E

 Q: Answer is played by symbol of inequality
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'played by', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'inequality', 'p': 'symbol', 'o': '$y0'}}
 TEMPLATE: E REF xF . xF RFG ?G

 Q: the date disbanded for label calvin harris is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'date disbanded', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'calvin harris', 'p': 'label', 'o': '$y0'}}
 TEMPLATE: E REF xF . xF RFG ?G

 Q: the history of a country or state for history of topic of korea is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'korea', 'p': 'history of topic', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'history of a country or state'}}
 TEMPLATE: <S P ?O ; ?O instanceOf Type>

 Q: the soil type whose name has the word vertisol in it is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'soil type'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'contains', 'o': 'vertisol'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; contains word >

 Q: the river with the most throughput is Answer
 SPARQL: lol
 ALIST: {'h': 'max', 'v': '$y0', 's': 'Answer', 'p': 'throughput', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'river'}}
 TEMPLATE: ?E is_a Type, ?E pred Obj  value. MAX/MIN (value)

 Q: there are Answer courts are in the supreme court of canada
 SPARQL: lol
 ALIST: {'h': 'count', 'v': 'Answer', 's': 'Answer', 'p': 'court', 'o': 'supreme court of canada'}
 TEMPLATE: Count ent (ent-pred-obj)

 Q: what is the postal code of headquarters of baidu located in beijing is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'postal code', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'baidu', 'p': 'headquarters location', 'o': '$y0', '$y0': {'h': 'value', 'v': '$y0', 's': '$y0', 'p': 'headquarters location', 'o': 'beijing'}}}
 TEMPLATE: (E pred ?Obj ) prop value

 Q: the ceremonial county of england for enclave within of leicester is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'leicester', 'p': 'enclave within', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'ceremonial county of england'}}
 TEMPLATE: <S P ?O ; ?O instanceOf Type>

 Q: the decay mode of uranium-238 is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'uranium-238', 'p': 'decay mode', 'o': 'Answer'}
 TEMPLATE: E REF ?F

 Q: the human for mother of bill gates is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'bill gates', 'p': 'mother', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'human'}}
 TEMPLATE: <S P ?O ; ?O instanceOf Type>

 Q: the award with the winner of loretta lynn is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'winner', 'o': 'loretta lynn', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'award'}}
 TEMPLATE: <?S P O ; ?S InstanceOf Type>

 Q: the historical nationality for the location of bilbao is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'bilbao', 'p': 'location', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'historical nationality'}}
 TEMPLATE: <S P ?O ; ?O instanceOf Type>

 Q: the official residence of queens is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'official residence', 'o': 'queens'}
 TEMPLATE: ?D RDE E

 Q: the edition on the origin of species, which was published in 1906, is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': 'on the origin of species', 'p': 'edition', 'o': 'Answer', 't': '1906'}
 TEMPLATE: (E pred F) prop ?value

 Q: the timeline of topic for culture of belle barth is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'timeline of topic', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'belle barth', 'p': 'culture', 'o': '$y0'}}
 TEMPLATE: C RCD xD . xD RDE ?E

 Q: the material which has the highest operating temperature is Answer
 SPARQL: lol
 ALIST: {'h': 'max', 'v': '$y0', 's': 'Answer', 'p': 'operating temperature', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'material'}}
 TEMPLATE: ?E is_a Type, ?E pred Obj  value. MAX/MIN (value)

 Q: the member state of the international centre for settlement of investment disputes which has the maximum inflation rate is Answer
 SPARQL: lol
 ALIST: {'h': 'max', 'v': '$y0', 's': 'Answer', 'p': 'inflation rate', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'state', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'member of', 'o': 'international centre for settlement of investment disputes'}}}
 TEMPLATE: ?E is_a Type. ?E pred Obj. ?E-secondClause value. MAX (value)

 Q: the comics character which starts with the letter viper is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'comics character'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'contains', 'o': 'viper'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; contains word >

 Q: the superhero that contains the word wolfsbane in its name is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'superhero'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'contains', 'o': 'wolfsbane'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; contains word >

 Q: the free or open-source video game with the maximum number of players is Answer
 SPARQL: lol
 ALIST: {'h': 'max', 'v': '$y0', 's': 'Answer', 'p': 'maximum number of players', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'free or open-source video game'}}
 TEMPLATE: ?E is_a Type, ?E pred Obj  value. MAX/MIN (value)

 Q: the inner planet which has the highest orbital eccentricity is Answer
 SPARQL: lol
 ALIST: {'h': 'max', 'v': '$y0', 's': 'Answer', 'p': 'orbital eccentricity', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'inner planet'}}
 TEMPLATE: ?E is_a Type, ?E pred Obj  value. MAX/MIN (value)

 Q: the church monument where paul was the patron saint is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'patron saint', 'o': 'paul', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'church'}}
 TEMPLATE: <?S P O ; ?S InstanceOf Type>

 Q: the sacred language which follows ancient greek is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'follows', 'o': 'ancient greek', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'sacred language'}}
 TEMPLATE: <?S P O ; ?S InstanceOf Type>

 Q: the viceroy for office held by head of state of tasmania is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'tasmania', 'p': 'office held by head of state', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'viceroy'}}
 TEMPLATE: <S P ?O ; ?O instanceOf Type>

 Q: the person who is a citizen of romania has the highest egf rating is Answer
 SPARQL: lol
 ALIST: {'h': 'max', 'v': '$y0', 's': 'Answer', 'p': 'egf rating', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'person', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'citizen of', 'o': 'romania'}}}
 TEMPLATE: ?E is_a Type. ?E pred Obj. ?E-secondClause value. MAX (value)

 Q: the fictional detective which start with the letter s is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'fictional detective'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'starts_with', 'o': 's'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; starts with character >

 Q: the set of numbers with the highest upper limit is Answer
 SPARQL: lol
 ALIST: {'h': 'max', 'v': '$y0', 's': 'Answer', 'p': 'upper limit', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'set of numbers'}}
 TEMPLATE: ?E is_a Type, ?E pred Obj  value. MAX/MIN (value)

 Q: the former administrative territorial entity for located on terrain feature of classical antiquity is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'classical antiquity', 'p': 'location', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'former administrative territorial entity'}}
 TEMPLATE: <S P ?O ; ?O instanceOf Type>

 Q: the automobile model that is manufactured by honda is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'manufactured by', 'o': 'honda', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'automobile model'}}
 TEMPLATE: <?S P O ; ?S InstanceOf Type>

 Q: the permanent duplicated item of famine is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'permanent duplicated item', 'o': 'famine'}
 TEMPLATE: ?D RDE E

 Q: the award danila kozlovsky received in 2017 is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': 'danila kozlovsky', 'p': 'award', 'o': 'Answer', 't': '2017'}
 TEMPLATE: (E pred F) prop ?value

 Q: the chinese character which has the tallest stroke count is Answer
 SPARQL: lol
 ALIST: {'h': 'max', 'v': '$y0', 's': 'Answer', 'p': 'stroke count', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'chinese character'}}
 TEMPLATE: ?E is_a Type, ?E pred Obj  value. MAX/MIN (value)

 Q: the kinship whose name has the word uncle in it is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'kinship'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'contains', 'o': 'uncle'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; contains word >

 Q: the license for copyright is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'license', 'o': 'copyright'}
 TEMPLATE: ?D RDE E

 Q: the civil parish that begins with the letter w is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'civil parish'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'starts_with', 'o': 'w'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; starts with character >

 Q: it is Answer that the melting point of mercury is less than -45.6
 SPARQL: lol
 ALIST: {'h': 'less', 'v': 'Answer', 's': 'mercury', 'p': 'melting point', 'o': 'Answer', 'Answer': '-45.6'}
 TEMPLATE: ASK ?sbj ?pred ?obj filter ?obj = num

 Q: the science starts with the letter v is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'branch of science'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'starts_with', 'o': 'v'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; starts with character >

 Q: the human development index of chile in 2012 is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': 'chile', 'p': 'human development index', 'o': 'Answer', 't': '2012'}
 TEMPLATE: (E pred F) prop ?value

 Q: the university building for affiliation of columbia university is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'affiliation', 'o': 'columbia university', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'university building'}}
 TEMPLATE: <?S P O ; ?S InstanceOf Type>

 Q: the density of hydrogen peroxide at a temperature of 20.0 is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'density', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'hydrogen peroxide', 'p': 'density', 'o': '$y0', '$y0': {'h': 'value', 'v': '$y0', 's': '$y0', 'p': 'temperature', 'o': '20.0'}}}
 TEMPLATE: (E pred F) prop ?value

 Q: the main subject for history of religions is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'main subject', 'o': 'history of religions'}
 TEMPLATE: ?D RDE E

 Q: barry humphries had award received as centenary medal in Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': '$y0', 's': 'barry humphries', 'p': 'award received', 'o': '$y0', '$y0': {'h': 'value', 'v': '$y0', 's': '$y0', 'p': 'award received', 'o': 'centenary medal'}, 't': 'Answer'}
 TEMPLATE: (E pred ?Obj ) prop value

 Q: the stadium for home venue of green bay packers is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'green bay packers', 'p': 'home venue', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'stadium'}}
 TEMPLATE: <S P ?O ; ?O instanceOf Type>

 Q: the wrote language of hiroshi sugimoto with time–manner–place as typology is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': 'hiroshi sugimoto', 'p': 'language', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'typology', 'o': 'time–manner–place'}}
 TEMPLATE: E REF ?F . ?F RFG G

 Q: the dyad that contains the word yan in its name is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'dyad'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'contains', 'o': 'yan'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; contains word >

 Q: the non-metal with the most electronegativity is Answer
 SPARQL: lol
 ALIST: {'h': 'max', 'v': '$y0', 's': 'Answer', 'p': 'electronegativity', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'non-metal'}}
 TEMPLATE: ?E is_a Type, ?E pred Obj  value. MAX/MIN (value)

 Q: the public company whose name has the word yandex in it is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'public company'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'contains', 'o': 'yandex'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; contains word >

 Q: the treaty which start with the letter t is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'treaty'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'starts_with', 'o': 't'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; starts with character >

 Q: the autonomous system number of amazon is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'amazon', 'p': 'autonomous system number', 'o': 'Answer'}
 TEMPLATE: E REF ?F

 Q: fantastic fiction author id of james ellroy is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'james ellroy', 'p': 'fantastic fiction author id', 'o': 'Answer'}
 TEMPLATE: E REF ?F

 Q: isadora duncan had significant event as funeral in Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': '$y0', 's': 'isadora duncan', 'p': 'significant event', 'o': '$y0', '$y0': {'h': 'value', 'v': '$y0', 's': '$y0', 'p': 'significant event', 'o': 'funeral'}, 't': 'Answer'}
 TEMPLATE: (E pred ?Obj ) prop value

 Q: the operator of sydney metro is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'operator', 'o': 'sydney metro'}
 TEMPLATE: ?D RDE E

 Q: the number of those maintained by fukuoka is Answer
 SPARQL: lol
 ALIST: {'h': 'count', 'v': 'Answer', 's': 'Answer', 'p': 'maintained by', 'o': 'fukuoka'}
 TEMPLATE: Count ent (ent-pred-obj)

 Q: the interface standard whose name has the word virtuallink in it is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'interface standard'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'contains', 'o': 'virtuallink'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; contains word >

 Q: the scientific area of developed by of perl is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'area', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'perl', 'p': 'developed by', 'o': '$y0'}}
 TEMPLATE: E REF xF . xF RFG ?G

 Q: the chinese dynasty replaced by yuan dynasty is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'yuan', 'p': 'replaced by', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'chinese dynasty'}}
 TEMPLATE: <S P ?O ; ?O instanceOf Type>

 Q: the instruction set of 16-bit architecture is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'instruction set', 'o': '16-bit architecture'}
 TEMPLATE: ?D RDE E

 Q: the national association football team whose name has the word team in it is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'national association football team'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'contains', 'o': 'team'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; contains word >

 Q: there are Answer highway systems are by interstate highway system
 SPARQL: lol
 ALIST: {'h': 'count', 'v': 'Answer', 's': 'Answer', 'p': 'highway system', 'o': 'interstate highway system'}
 TEMPLATE: Count ent (ent-pred-obj)

 Q: the isotope of tin which has the highest spin quantum number is Answer
 SPARQL: lol
 ALIST: {'h': 'max', 'v': '$y0', 's': 'Answer', 'p': 'spin quantum number', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'isotope of tin'}}
 TEMPLATE: ?E is_a Type, ?E pred Obj  value. MAX/MIN (value)

 Q: the file format is used by the programming language sql is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'programming language', 'o': 'sql', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'file format'}}
 TEMPLATE: <?S P O ; ?S InstanceOf Type>

 Q: it is Answer that the dynamic viscosity of the acetic acid greater than 0.6288
 SPARQL: lol
 ALIST: {'h': 'greater', 'v': 'Answer', 's': 'acetic acid', 'p': 'dynamic viscosity', 'o': 'Answer', 'Answer': '0.6288'}
 TEMPLATE: ASK ?sbj ?pred ?obj filter ?obj = num

 Q: the member of crew of cosmonaut mission of michael fincke is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'member of crew of', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'michael fincke', 'p': 'cosmonaut mission', 'o': '$y0'}}
 TEMPLATE: C RCD xD . xD RDE ?E

 Q: the parent company of alumnus of virgil thomson is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'parent company of', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'virgil thomson', 'p': 'alumnus of', 'o': '$y0'}}
 TEMPLATE: E REF xF . xF RFG ?G

 Q: the mathematical notation which start with the letter s is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'mathematical notation'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'starts_with', 'o': 's'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; starts with character >

 Q: it is Answer that there are more than 0 survivors of the charkhi dadri mid-air collision
 SPARQL: lol
 ALIST: {'h': 'equal', 'v': 'Answer', 's': 'charkhi dadri mid-air collision', 'p': 'survivors', 'o': 'Answer', 'Answer': '0'}
 TEMPLATE: ASK ?sbj ?pred ?obj filter ?obj = num

 Q: the inflation rate in macedonia reached 3.1 in Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': '$y0', 's': 'macedonia', 'p': 'inflation rate', 'o': '$y0', '$y0': {'h': 'value', 'v': '$y0', 's': '$y0', 'p': 'inflation rate', 'o': '3.1'}, 't': 'Answer'}
 TEMPLATE: (E pred ?Obj ) prop value

 Q: the luther city which start with the letter w is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'luther city'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'starts_with', 'o': 'w'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; starts with character >

 Q: the greek deity of sibling of zeus which contains the word poseidon in it name is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'greek deity', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'sibling', 'o': 'zeus'}}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'contains', 'o': 'poseidon'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; contains word >

 Q: the student that coined the euler-lagrange equation is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'student', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'euler-lagrange equation', 'p': 'coined', 'o': '$y0'}}
 TEMPLATE: E REF xF . xF RFG ?G

 Q: the extrasolar planet within the constellation aquarius which has the smallest radius is Answer
 SPARQL: lol
 ALIST: {'h': 'min', 'v': '$y0', 's': 'Answer', 'p': 'radius', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'extrasolar planet', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'constellation', 'o': 'aquarius'}}}
 TEMPLATE: ?E is_a Type. ?E pred Obj. ?E-secondClause value. MIN (value)

 Q: the sovereign state starts with the letter y is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'sovereign state'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'starts_with', 'o': 'y'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; starts with character >

 Q: the class iiia combustible liquid which has the highest short-term exposure limit is Answer
 SPARQL: lol
 ALIST: {'h': 'max', 'v': '$y0', 's': 'Answer', 'p': 'short-term exposure limit', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'class iiia combustible liquid'}}
 TEMPLATE: ?E is_a Type, ?E pred Obj  value. MAX/MIN (value)

 Q: there are Answer different kinds of industry are affected by furniture
 SPARQL: lol
 ALIST: {'h': 'count', 'v': 'Answer', 's': 'Answer', 'p': 'industry', 'o': 'furniture'}
 TEMPLATE: Count ent (ent-pred-obj)

 Q: the discography for discography of jerry lee lewis is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'jerry lee lewis', 'p': 'discography', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'discography'}}
 TEMPLATE: <S P ?O ; ?O instanceOf Type>

 Q: the type of quantum particle which has highest gyromagnetic ratio is Answer
 SPARQL: lol
 ALIST: {'h': 'max', 'v': '$y0', 's': 'Answer', 'p': 'gyromagnetic ratio', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'type of quantum particle'}}
 TEMPLATE: ?E is_a Type, ?E pred Obj  value. MAX/MIN (value)

 Q: the extensive physical quantity that is measured by the inertial mass and starts with the letter m is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'extensive physical quantity', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'measured by', 'o': 'inertial mass'}}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'starts_with', 'o': 'm'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; starts with character >

 Q: the admin hq of alma mater of victor hugo is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'hq', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'victor hugo', 'p': 'alma mater', 'o': '$y0'}}
 TEMPLATE: E REF xF . xF RFG ?G

 Q: it is Answer that the gestation period of the gorilla less than 324.0
 SPARQL: lol
 ALIST: {'h': 'less', 'v': 'Answer', 's': 'gorilla', 'p': 'gestation period', 'o': 'Answer', 'Answer': '324.0'}
 TEMPLATE: ASK ?sbj ?pred ?obj filter ?obj = num

 Q: the death place of ignaz semmelweis which is next to heiligenstadt is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': 'ignaz semmelweis', 'p': 'death place', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'next to', 'o': 'heiligenstadt'}}
 TEMPLATE: E REF ?F . ?F RFG G

 Q: the career of characters of buffy the vampire slayer is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'career', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'buffy the vampire slayer', 'p': 'characters', 'o': '$y0'}}
 TEMPLATE: E REF xF . xF RFG ?G

 Q: the medical specialty whose name has the word trichology in it is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'medical specialty'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'contains', 'o': 'trichology'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; contains word >

 Q: the programming language designed by dennis m. ritchie is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'designed by', 'o': 'dennis m. ritchie', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'programming language'}}
 TEMPLATE: <?S P O ; ?S InstanceOf Type>

 Q: the award olga tokarczuk received in 2015 is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': 'olga tokarczuk', 'p': 'award', 'o': 'Answer', 't': '2015'}
 TEMPLATE: (E pred F) prop ?value

 Q: the drainage basin of the brazos river is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'brazos river', 'p': 'drainage basin', 'o': 'Answer'}
 TEMPLATE: E REF ?F

 Q: the domain of compact space is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'domain', 'o': 'compact space'}
 TEMPLATE: ?D RDE E

 Q: it is Answer that the throughput of the vest-vassdraget equal to 2697.672
 SPARQL: lol
 ALIST: {'h': 'equal', 'v': 'Answer', 's': 'vest-vassdraget', 'p': 'throughput', 'o': 'Answer', 'Answer': '2697.672'}
 TEMPLATE: ASK ?sbj ?pred ?obj filter ?obj = num

 Q: the chemical compound with the least acceptable daily intake is Answer
 SPARQL: lol
 ALIST: {'h': 'min', 'v': '$y0', 's': 'Answer', 'p': 'acceptable daily intake', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'chemical compound'}}
 TEMPLATE: ?E is_a Type. ?E pred Obj. ?E-secondClause value. MIN (value)

 Q: the chief executive officer of hewlett-packard is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'hewlett-packard', 'p': 'chief executive officer', 'o': 'Answer'}
 TEMPLATE: E REF ?F

 Q: it is Answer that the slope rating of the merion golf club equal to 149
 SPARQL: lol
 ALIST: {'h': 'equal', 'v': 'Answer', 's': 'merion golf club', 'p': 'slope rating', 'o': 'Answer', 'Answer': '149'}
 TEMPLATE: ASK ?sbj ?pred ?obj filter ?obj = num

 Q: the female beauty pageant that operating area all countries which contains the word model in their name is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'female beauty pageant', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'operating area', 'o': 'all countries'}}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'contains', 'o': 'model'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; contains word >

 Q: the motto of shahada is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'motto', 'o': 'shahada'}
 TEMPLATE: ?D RDE E

 Q: the people who is the child of pompey and the mother mucia tertia is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'child', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'pompey', 'p': 'child', 'o': '$y0', '$y0': {'h': 'value', 'v': '$y0', 's': '$y0', 'p': 'mother', 'o': 'mucia tertia'}}}
 TEMPLATE: (E pred F) prop ?value

 Q: the political party whose name has the word veritas in it is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'political party'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'contains', 'o': 'veritas'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; contains word >

 Q: the higher taxon of mammut with vernacular name mastodonty is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': 'mammut', 'p': 'higher taxon', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'vernacular name', 'o': 'mastodonty'}}
 TEMPLATE: E REF ?F . ?F RFG G

 Q: the prequel of plasma state of matter which is using condensation is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': 'condensation', 'p': 'using', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'prequel of', 'o': 'plasma state of matter'}}
 TEMPLATE: E REF ?F . ?F RFG G

 Q: the drug which has the highest heat capacity is Answer
 SPARQL: lol
 ALIST: {'h': 'max', 'v': '$y0', 's': 'Answer', 'p': 'heat capacity', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'drug'}}
 TEMPLATE: ?E is_a Type, ?E pred Obj  value. MAX/MIN (value)

 Q: the new zealand gazetteer place id of auckland is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'auckland', 'p': 'new zealand gazetteer place id', 'o': 'Answer'}
 TEMPLATE: E REF ?F

 Q: the population of dalian reached 4480000 in Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': '$y0', 's': 'dalian', 'p': 'population', 'o': '$y0', '$y0': {'h': 'value', 'v': '$y0', 's': '$y0', 'p': 'population', 'o': '4480000'}, 't': 'Answer'}
 TEMPLATE: (E pred ?Obj ) prop value

 Q: the phone number of the united states postal service is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'united states postal service', 'p': 'phone number', 'o': 'Answer'}
 TEMPLATE: E REF ?F

 Q: the edition runtime for league of legends is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'edition', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'league of legends', 'p': 'runtime', 'o': '$y0'}}
 TEMPLATE: E REF xF . xF RFG ?G

 Q: the decay mode for alpha decay is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'decay mode', 'o': 'alpha decay'}
 TEMPLATE: ?D RDE E

 Q: the hancinema person id for zhang ziyi is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'zhang ziyi', 'p': 'hancinema person id', 'o': 'Answer'}
 TEMPLATE: E REF ?F

 Q: the total reserves of tanzania is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'tanzania', 'p': 'total reserves', 'o': 'Answer'}
 TEMPLATE: E REF ?F

 Q: the pharmaceutical product for active ingredient in of erythromycin is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'erythromycin', 'p': 'active ingredient in', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'pharmaceutical product'}}
 TEMPLATE: <S P ?O ; ?O instanceOf Type>

 Q: the series of creative works that starts with the letter s is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'series of creative works'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'starts_with', 'o': 's'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; starts with character >

 Q: the gcatholic church id of archbasilica of st. john lateran is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'archbasilica of st. john lateran', 'p': 'gcatholic church id', 'o': 'Answer'}
 TEMPLATE: E REF ?F

 Q: the construction located in oregon with the maximum slope rating is Answer
 SPARQL: lol
 ALIST: {'h': 'max', 'v': '$y0', 's': 'Answer', 'p': 'slope rating', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'construction', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'located in the administrative territorial entity', 'o': 'oregon'}}}
 TEMPLATE: ?E is_a Type. ?E pred Obj. ?E-secondClause value. MAX (value)

 Q: it is Answer that the saf 2507 have a pitting resistance equivalent number that is greater than 45.24
 SPARQL: lol
 ALIST: {'h': 'greater', 'v': 'Answer', 's': 'saf 2507', 'p': 'pitting resistance equivalent number', 'o': 'Answer', 'Answer': '45.24'}
 TEMPLATE: ASK ?sbj ?pred ?obj filter ?obj = num

 Q: the human for doctoral student of jonas salk is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'jonas salk', 'p': 'doctoral student', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'human'}}
 TEMPLATE: <S P ?O ; ?O instanceOf Type>

 Q: there are Answer people use polish as their native language
 SPARQL: lol
 ALIST: {'h': 'count', 'v': 'Answer', 's': 'Answer', 'p': 'native language', 'o': 'polish'}
 TEMPLATE: Count ent (ent-pred-obj)

 Q: there are Answer presenters are dick clark
 SPARQL: lol
 ALIST: {'h': 'count', 'v': 'Answer', 's': 'Answer', 'p': 'presenter', 'o': 'dick clark'}
 TEMPLATE: Count ent (ent-pred-obj)

 Q: the parent organization of ard is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'parent organization', 'o': 'ard'}
 TEMPLATE: ?D RDE E

 Q: it is Answer that the number of representations of a seaside rendezvous less than 2.4
 SPARQL: lol
 ALIST: {'h': 'less', 'v': 'Answer', 's': 'a seaside rendezvous', 'p': 'number of representations', 'o': 'Answer', 'Answer': '2.4'}
 TEMPLATE: ASK ?sbj ?pred ?obj filter ?obj = num

 Q: the siruta code of constanta is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'constanta', 'p': 'siruta code', 'o': 'Answer'}
 TEMPLATE: E REF ?F

 Q: the partner of chow yun-fat is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'partner', 'o': 'chow yun-fat', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'human'}}
 TEMPLATE: <?S P O ; ?S InstanceOf Type>

 Q: the faith which has influence on madonna is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'faith', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'madonna', 'p': 'has influence', 'o': '$y0'}}
 TEMPLATE: C RCD xD . xD RDE ?E

 Q: there are Answer commemorates were given to giuseppe garibaldi
 SPARQL: lol
 ALIST: {'h': 'count', 'v': 'Answer', 's': 'Answer', 'p': 'commemorates', 'o': 'giuseppe garibaldi'}
 TEMPLATE: Count ent (ent-pred-obj)

 Q: the team member of the chicago cubs is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'team member', 'o': 'chicago cubs'}
 TEMPLATE: ?D RDE E

 Q: the political philosophy which start with the letter w is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'political philosophy'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'starts_with', 'o': 'w'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; starts with character >

 Q: the country uses the sterling pound as its currency is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'currency', 'o': 'pound', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'country'}}
 TEMPLATE: <?S P O ; ?S InstanceOf Type>

 Q: the national cuisine which starts with the letter m is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'national cuisine'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'starts_with', 'o': 'm'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; starts with character >

 Q: the aspect ratio of law & order in 1994 is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': 'law & order', 'p': 'aspect ratio', 'o': 'Answer', 't': '1994'}
 TEMPLATE: (E pred F) prop ?value

 Q: the game platform of pac-man with the latest release version 4.2.6 is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': 'pac-man', 'p': 'platform', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'version', 'o': '4.2.6'}}
 TEMPLATE: E REF ?F . ?F RFG G

 Q: the historic era in epaminondas which completed in 600-1-1 is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': 'epaminondas', 'p': 'era', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'completed in', 'o': '600-1-1'}}
 TEMPLATE: E REF ?F . ?F RFG G

 Q: the connecting service of ave is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'connecting service', 'o': 'ave'}
 TEMPLATE: ?D RDE E

 Q: the official language of basin countries of white sea is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'official language', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'white sea', 'p': 'basin countries', 'o': '$y0'}}
 TEMPLATE: E REF xF . xF RFG ?G

 Q: the organization name starts with z is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'organization'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'starts_with', 'o': 'z'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; starts with character >

 Q: the birth city of kristen stewart which seat in los angeles county is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': 'kristen stewart', 'p': 'birth city', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'county seat of', 'o': 'los angeles county'}}
 TEMPLATE: E REF ?F . ?F RFG G

 Q: the developer of continent of amundsen sea is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'developer', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'amundsen sea', 'p': 'continent', 'o': '$y0'}}
 TEMPLATE: E REF xF . xF RFG ?G

 Q: the giants killed by heracles is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'killed by', 'o': 'heracles', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'giants'}}
 TEMPLATE: <?S P O ; ?S InstanceOf Type>

 Q: the business enterprise with the most total liabilities is Answer
 SPARQL: lol
 ALIST: {'h': 'max', 'v': '$y0', 's': 'Answer', 'p': 'total liabilities', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'business'}}
 TEMPLATE: ?E is_a Type. ?E pred Obj. ?E-secondClause value. MAX (value)

 Q: the short name of aruba which is instance of emoji flag sequence is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'short name', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'aruba', 'p': 'short name', 'o': '$y0', '$y0': {'h': 'value', 'v': '$y0', 's': '$y0', 'p': 'type', 'o': 'emoji flag sequence'}}}
 TEMPLATE: (E pred F) prop ?value

 Q: the sister of jean shrimpton who has brown eyes is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': 'jean shrimpton', 'p': 'sister', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'eyes', 'o': 'brown'}}
 TEMPLATE: E REF ?F . ?F RFG G

 Q: the phantom island which starts with the letter t is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'phantom island'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'starts_with', 'o': 't'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; starts with character >

 Q: the developer of proper motion with surname halley is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': 'proper motion', 'p': 'developer', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'surname', 'o': 'halley'}}
 TEMPLATE: E REF ?F . ?F RFG G

 Q: there are Answer members of the crew are enola gay
 SPARQL: lol
 ALIST: {'h': 'count', 'v': 'Answer', 's': 'Answer', 'p': 'member of the crew', 'o': 'enola gay'}
 TEMPLATE: Count ent (ent-pred-obj)

 Q: it is Answer that the kinematic viscosity of propylene glycol equal to 0.054
 SPARQL: lol
 ALIST: {'h': 'equal', 'v': 'Answer', 's': 'propylene glycol', 'p': 'kinematic viscosity', 'o': 'Answer', 'Answer': '0.054'}
 TEMPLATE: ASK ?sbj ?pred ?obj filter ?obj = num

 Q: the coast of aleutian islands that has a tributary in los angeles river is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': 'aleutian islands', 'p': 'on the coast of', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'tributary', 'o': 'los angeles river'}}
 TEMPLATE: E REF ?F . ?F RFG G

 Q: there are Answer anatomical locations are by the thymus
 SPARQL: lol
 ALIST: {'h': 'count', 'v': 'Answer', 's': 'Answer', 'p': 'anatomical location', 'o': 'thymus'}
 TEMPLATE: Count ent (ent-pred-obj)

 Q: the lake with the largest length is Answer
 SPARQL: lol
 ALIST: {'h': 'max', 'v': '$y0', 's': 'Answer', 'p': 'length', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'lake'}}
 TEMPLATE: ?E is_a Type, ?E pred Obj  value. MAX/MIN (value)

 Q: the ice hockey team season which has the highest number of points/goals conceded is Answer
 SPARQL: lol
 ALIST: {'h': 'max', 'v': '$y0', 's': 'Answer', 'p': 'number of points/goals conceded', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'ice hockey team season'}}
 TEMPLATE: ?E is_a Type, ?E pred Obj  value. MAX/MIN (value)

 Q: the name of the balloon-borne telescope with the largest wavelength is Answer
 SPARQL: lol
 ALIST: {'h': 'max', 'v': '$y0', 's': 'Answer', 'p': 'wavelength', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'balloon-borne telescope'}}
 TEMPLATE: ?E is_a Type. ?E pred Obj. ?E-secondClause value. MAX (value)

 Q: the credit institution starts with the letter w is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'credit institution'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'starts_with', 'o': 'w'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; starts with character >

 Q: the chemical compound with the highest kinematic viscosity is Answer
 SPARQL: lol
 ALIST: {'h': 'max', 'v': '$y0', 's': 'Answer', 'p': 'kinematic viscosity', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'chemical compound'}}
 TEMPLATE: ?E is_a Type, ?E pred Obj  value. MAX/MIN (value)

 Q: the character type for opposite of of superhero is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'superhero', 'p': 'opposite of', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'character type'}}
 TEMPLATE: <S P ?O ; ?O instanceOf Type>

 Q: the organization whose name has the word zollkriminalamt in it is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'organization'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'contains', 'o': 'zollkriminalamt'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; contains word >

 Q: henry steele commager received his education from the university of chicago in Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'from', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'henry steele commager', 'p': 'education', 'o': '$y0', '$y0': {'h': 'value', 'v': '$y0', 's': '$y0', 'p': 'education', 'o': 'university of chicago'}}}
 TEMPLATE: (E pred ?Obj ) prop value

 Q: Answer nonprofit organization is regulated by the association of football
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'football', 'p': 'regulated by', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'nonprofit organization'}}
 TEMPLATE: <S P ?O ; ?O instanceOf Type>

 Q: Answer is in conflict of depiction of raising the flag on iwo jima
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'conflict', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'raising the flag on iwo jima', 'p': 'depiction of', 'o': '$y0'}}
 TEMPLATE: E REF xF . xF RFG ?G

 Q: the tourist office for office is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'tourist office', 'o': 'office'}
 TEMPLATE: ?D RDE E

 Q: the spouse of carlos saura in 2006 is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': 'carlos saura', 'p': 'spouse', 'o': 'Answer', 't': '2006'}
 TEMPLATE: (E pred F) prop ?value

 Q: the runway in lax which are made of concrete is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'runway', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'lax', 'p': 'runway', 'o': '$y0', '$y0': {'h': 'value', 'v': '$y0', 's': '$y0', 'p': 'made of', 'o': 'concrete'}}}
 TEMPLATE: (E pred F) prop ?value

 Q: the landscape of virgin of the rocks which has birth city tzippori is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': 'virgin of the rocks', 'p': 'landscape of', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'birth city', 'o': 'tzippori'}}
 TEMPLATE: E REF ?F . ?F RFG G

 Q: the confederation with jefferson davis as head of government is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'head of government', 'o': 'jefferson davis', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'confederation'}}
 TEMPLATE: <?S P O ; ?S InstanceOf Type>

 Q: the winged horse which start with the letter pegasus is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'winged horse'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'contains', 'o': 'pegasus'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; contains word >

 Q: the poetry collection that has traditional chinese characters as writing system is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'writing system', 'o': 'traditional chinese characters', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'poetry collection'}}
 TEMPLATE: <?S P O ; ?S InstanceOf Type>

 Q: the art genre that studied by ballet studies and which contains the word ballet in its name is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'art genre', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'studied by', 'o': 'ballet studies'}}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'contains', 'o': 'ballet'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; contains word >

 Q: the genetic association that can be found in species with post-traumatic stress disorder is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'found in species', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'post-traumatic stress disorder', 'p': 'genetic association', 'o': '$y0'}}
 TEMPLATE: E REF xF . xF RFG ?G

 Q: the continent of death place of thomas morley is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'continent', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'thomas morley', 'p': 'death place', 'o': '$y0'}}
 TEMPLATE: E REF xF . xF RFG ?G

 Q: the connecting line of chulalongkorn university is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'chulalongkorn university', 'p': 'connecting line', 'o': 'Answer'}
 TEMPLATE: E REF ?F

 Q: the malayalam alphabet is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'malayalam', 'p': 'alphabet', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'alphabet'}}
 TEMPLATE: <S P ?O ; ?O instanceOf Type>

 Q: the athletic conference which contains the word north in its name is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'athletic conference'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'contains', 'o': 'north'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; contains word >

 Q: the award maria montessori was nominated for in 1950 is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': 'maria montessori', 'p': 'nominated for', 'o': 'Answer', 't': '1950'}
 TEMPLATE: (E pred F) prop ?value

 Q: the mother of nicole richie is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'mother', 'o': 'nicole richie', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'human'}}
 TEMPLATE: <?S P O ; ?S InstanceOf Type>

 Q: the meta-organization that is regulated by the football association is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'football', 'p': 'regulated by', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'meta-organization'}}
 TEMPLATE: <S P ?O ; ?O instanceOf Type>

 Q: the type of quantum particle with the lowest gyromagnetic ratio which has weak interaction is Answer
 SPARQL: lol
 ALIST: {'h': 'min', 'v': '$y0', 's': 'Answer', 'p': 'gyromagnetic ratio', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'type of quantum particle', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'interaction', 'o': 'weak interaction'}}}
 TEMPLATE: ?E is_a Type. ?E pred Obj. ?E-secondClause value. MIN (value)

 Q: the binary star which has the highest color index is Answer
 SPARQL: lol
 ALIST: {'h': 'max', 'v': '$y0', 's': 'Answer', 'p': 'color index', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'binary star'}}
 TEMPLATE: ?E is_a Type, ?E pred Obj  value. MAX/MIN (value)

 Q: the youtube channel id of miley cyrus is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'miley cyrus', 'p': 'youtube channel id', 'o': 'Answer'}
 TEMPLATE: E REF ?F

 Q: the language of william john macquorn rankine with place–manner–time as typology is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': 'william john macquorn rankine', 'p': 'language', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'typology', 'o': 'place–manner–time'}}
 TEMPLATE: E REF ?F . ?F RFG G

 Q: the ring system which start with the letter r is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'ring system'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'starts_with', 'o': 'r'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; starts with character >

 Q: the animated character which has got more number of children is Answer
 SPARQL: lol
 ALIST: {'h': 'max', 'v': '$y0', 's': 'Answer', 'p': 'number of children', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'animated character'}}
 TEMPLATE: ?E is_a Type, ?E pred Obj  value. MAX/MIN (value)

 Q: the people who was married to lynn margulis in 1957 is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': 'lynn margulis', 'p': 'married to', 'o': 'Answer', 't': '1957'}
 TEMPLATE: (E pred F) prop ?value

 Q: the board game that practiced by backgammon player and which contains the word backgammon in their name is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'board game', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'practiced by', 'o': 'backgammon player'}}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'contains', 'o': 'backgammon'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; contains word >

 Q: there are Answer languages are based on the latin script
 SPARQL: lol
 ALIST: {'h': 'count', 'v': 'Answer', 's': 'Answer', 'p': 'based on', 'o': 'latin script', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'language'}}
 TEMPLATE: Count ent (ent-pred-obj)

 Q: the incumbent of professorship position of john budden is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'incumbent', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'john budden', 'p': 'professorship', 'o': '$y0'}}
 TEMPLATE: C RCD xD . xD RDE ?E

 Q: the last team allan border belonged to in 1980 is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': 'allan border', 'p': 'team', 'o': 'Answer', 't': '1980'}
 TEMPLATE: (E pred F) prop ?value

 Q: the business which has the most subscribers is Answer
 SPARQL: lol
 ALIST: {'h': 'max', 'v': '$y0', 's': 'Answer', 'p': 'subscribers', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'business'}}
 TEMPLATE: ?E is_a Type, ?E pred Obj  value. MAX/MIN (value)

 Q: the natural number with the highest numeric value is Answer
 SPARQL: lol
 ALIST: {'h': 'max', 'v': '$y0', 's': 'Answer', 'p': 'numeric value', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'natural number'}}
 TEMPLATE: ?E is_a Type. ?E pred Obj. ?E-secondClause value. MAX (value)

 Q: the award maria rojo received in 1978 is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': 'maria rojo', 'p': 'award', 'o': 'Answer', 't': '1978'}
 TEMPLATE: (E pred F) prop ?value

 Q: the deathplace of gediminas with twin town irkutsk is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': 'gediminas', 'p': 'deathplace', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'twin town', 'o': 'irkutsk'}}
 TEMPLATE: E REF ?F . ?F RFG G

 Q: the award john de mol received in 2011 is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': 'john de mol', 'p': 'award', 'o': 'Answer', 't': '2011'}
 TEMPLATE: (E pred F) prop ?value

 Q: the category of associated people of theatre season of odoacer is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'category of associated people', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'odoacer', 'p': 'theatre season', 'o': '$y0'}}
 TEMPLATE: E REF xF . xF RFG ?G

 Q: the enterprise for the parent organization of sears is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'sears', 'p': 'parent organization', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'enterprise'}}
 TEMPLATE: <S P ?O ; ?O instanceOf Type>

 Q: the issue of tuberculosis is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'tuberculosis', 'p': 'issue', 'o': 'Answer'}
 TEMPLATE: E REF ?F

 Q: the manifestation of work of johann reinhard kistner is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'manifestation of', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'johann reinhard kistner', 'p': 'work', 'o': '$y0'}}
 TEMPLATE: C RCD xD . xD RDE ?E

 Q: the wikimedia disambiguation page which starts with the letter z is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'wikimedia disambiguation page'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'starts_with', 'o': 'z'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; starts with character >

 Q: the circumstellar disk whose name has the word belt in it is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'circumstellar disk'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'contains', 'o': 'belt'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; contains word >

 Q: the circle of cornelius jansen is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'circle', 'o': 'cornelius jansen'}
 TEMPLATE: ?D RDE E

 Q: the gens of sallust is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'sallust', 'p': 'gens', 'o': 'Answer'}
 TEMPLATE: E REF ?F

 Q: the ceremony whose name has the word umhlanga in it is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'ceremony'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'contains', 'o': 'umhlanga'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; contains word >

 Q: the scientific model that starts with the letter w is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'scientific model'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'starts_with', 'o': 'w'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; starts with character >

 Q: the career of fishing which uses a fishing reel is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': 'fishing', 'p': 'career', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'uses', 'o': 'fishing reel'}}
 TEMPLATE: E REF ?F . ?F RFG G

 Q: the cruise speed of airbus a340 is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'airbus a340', 'p': 'cruise speed', 'o': 'Answer'}
 TEMPLATE: E REF ?F

 Q: the position held of martin van buren, which is replaced by is edward livingston, is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'position held', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'martin van buren', 'p': 'position held', 'o': '$y0', '$y0': {'h': 'value', 'v': '$y0', 's': '$y0', 'p': 'replaced by', 'o': 'edward livingston'}}}
 TEMPLATE: (E pred F) prop ?value

 Q: the administrative territorial entity of lancashire 1994 is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': 'lancashire', 'p': 'in', 'o': 'Answer', 't': '1994'}
 TEMPLATE: (E pred F) prop ?value

 Q: the stepparent of ludwig von mises is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'stepparent', 'o': 'ludwig von mises'}
 TEMPLATE: ?D RDE E

 Q: the analytic function which start with the letter function is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'analytic function'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'contains', 'o': 'function'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; contains word >

 Q: the city with millions of inhabitants which start with the letter v is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'city with millions of inhabitants'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'starts_with', 'o': 'v'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; starts with character >

 Q: the time of the day in year of easter is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': '$y0', 's': 'easter', 'p': 'day in year', 'o': '$y0', 't': 'Answer'}
 TEMPLATE: E REF xF . xF RFG ?G

 Q: the population of normandy in 2005 was Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': 'normandy', 'p': 'population', 'o': 'Answer', 't': '2005'}
 TEMPLATE: (E pred F) prop ?value

 Q: the faculty of film director of the star wars holiday special is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'faculty', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'the star wars holiday special', 'p': 'director', 'o': '$y0'}}
 TEMPLATE: C RCD xD . xD RDE ?E

 Q: the class ib flammable liquid which has the least lower flammable limit is Answer
 SPARQL: lol
 ALIST: {'h': 'max', 'v': '$y0', 's': 'Answer', 'p': 'lower flammable limit', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'class ib flammable liquid'}}
 TEMPLATE: ?E is_a Type, ?E pred Obj  value. MAX/MIN (value)

 Q: the position of head of government of service operator mig-21 is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'position of head of government', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'mig-21', 'p': 'operator', 'o': '$y0'}}
 TEMPLATE: E REF xF . xF RFG ?G

 Q: the publication date for itunes which has software version 12.7.5 is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'publication date', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'itunes', 'p': 'version', 'o': '$y0', '$y0': {'h': 'value', 'v': '$y0', 's': '$y0', 'p': 'version', 'o': '12.7.5'}}}
 TEMPLATE: (E pred ?Obj ) prop value

 Q: it is Answer that the total reserves of denmark equal to 75391898443
 SPARQL: lol
 ALIST: {'h': 'equal', 'v': 'Answer', 's': 'denmark', 'p': 'total reserves', 'o': 'Answer', 'Answer': '75391898443'}
 TEMPLATE: ASK ?sbj ?pred ?obj filter ?obj = num

 Q: the brockhaus enzyklopädie online id of chile is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'chile', 'p': 'brockhaus enzyklopädie online id', 'o': 'Answer'}
 TEMPLATE: E REF ?F

 Q: the statement supported by al-qaeda is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'statement supported by', 'o': 'al-qaeda'}
 TEMPLATE: ?D RDE E

 Q: the golf course designed by donald trump is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'designed by', 'o': 'donald trump', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'golf course'}}
 TEMPLATE: <?S P O ; ?S InstanceOf Type>

 Q: the srgb color hex triplet of cambrian is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'cambrian', 'p': 'srgb color hex triplet', 'o': 'Answer'}
 TEMPLATE: E REF ?F

 Q: the religious concept starts with the letter t is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'religious concept'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'starts_with', 'o': 't'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; starts with character >

 Q: the soundtrack album of symphony no.5 is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'soundtrack album', 'o': 'symphony no.5'}
 TEMPLATE: ?D RDE E

 Q: the airline that starts with the letter p is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'airline'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'starts_with', 'o': 'p'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; starts with character >

 Q: the cation with the lowest isospin z-component is Answer
 SPARQL: lol
 ALIST: {'h': 'min', 'v': '$y0', 's': 'Answer', 'p': 'isospin z-component', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'cation'}}
 TEMPLATE: ?E is_a Type. ?E pred Obj. ?E-secondClause value. MIN (value)

 Q: samuel beckett was nominated for nobel prize in literature in Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': '$y0', 's': 'samuel beckett', 'p': 'nominated for', 'o': '$y0', '$y0': {'h': 'value', 'v': '$y0', 's': '$y0', 'p': 'nominated for', 'o': 'nobel prize in literature'}, 't': 'Answer'}
 TEMPLATE: (E pred ?Obj ) prop value

 Q: the start time for bangalore located in the administrative territorial entity mysore state is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'start time', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'bangalore', 'p': 'located in the administrative territorial entity', 'o': '$y0', '$y0': {'h': 'value', 'v': '$y0', 's': '$y0', 'p': 'located in the administrative territorial entity', 'o': 'mysore state'}}}
 TEMPLATE: (E pred ?Obj ) prop value

 Q: the parity of higgs boson is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'higgs boson', 'p': 'parity', 'o': 'Answer'}
 TEMPLATE: E REF ?F

 Q: the city uses chinese new year as public holiday is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'public holiday', 'o': 'chinese new year', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'city'}}
 TEMPLATE: <?S P O ; ?S InstanceOf Type>

 Q: the sports season organized by the cyprus football association has the most participants is Answer
 SPARQL: lol
 ALIST: {'h': 'max', 'v': '$y0', 's': 'Answer', 'p': 'participants', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'sports season', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'organized by', 'o': 'cyprus football association'}}}
 TEMPLATE: ?E is_a Type. ?E pred Obj. ?E-secondClause value. MAX (value)

 Q: there are Answer teams are from the saitama seibu lions
 SPARQL: lol
 ALIST: {'h': 'count', 'v': 'Answer', 's': 'Answer', 'p': 'team', 'o': 'saitama seibu lions'}
 TEMPLATE: Count ent (ent-pred-obj)

 Q: the aircraft model with the lowest takeoff roll is Answer
 SPARQL: lol
 ALIST: {'h': 'min', 'v': '$y0', 's': 'Answer', 'p': 'takeoff roll', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'aircraft model'}}
 TEMPLATE: ?E is_a Type. ?E pred Obj. ?E-secondClause value. MIN (value)

 Q: the prevalence of tuberculosis is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'tuberculosis', 'p': 'prevalence', 'o': 'Answer'}
 TEMPLATE: E REF ?F

 Q: it is Answer that the watershed area of the rio de santa maria zobenigo greater than 0.00083176
 SPARQL: lol
 ALIST: {'h': 'greater', 'v': 'Answer', 's': 'rio de santa maria zobenigo', 'p': 'watershed area', 'o': 'Answer', 'Answer': '0.00083176'}
 TEMPLATE: ASK ?sbj ?pred ?obj filter ?obj = num

 Q: the lake outflow from the nile is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'lake outflow', 'o': 'nile'}
 TEMPLATE: ?D RDE E

 Q: it is Answer that clock speed of the watara supervision smaller than 3.2
 SPARQL: lol
 ALIST: {'h': 'less', 'v': 'Answer', 's': 'watara supervision', 'p': 'clock speed', 'o': 'Answer', 'Answer': '3.2'}
 TEMPLATE: ASK ?sbj ?pred ?obj filter ?obj = num

 Q: the nuclear weapons test designed by manhattan project is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'designed by', 'o': 'manhattan project', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'nuclear weapons test'}}
 TEMPLATE: <?S P O ; ?S InstanceOf Type>

 Q: the culture of state of australian secret intelligence service is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'culture', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'australian secret intelligence service', 'p': 'state', 'o': '$y0'}}
 TEMPLATE: E REF xF . xF RFG ?G

 Q: it is Answer that the patronage of the guiuan airport equal to 1.2
 SPARQL: lol
 ALIST: {'h': 'equal', 'v': 'Answer', 's': 'guiuan airport', 'p': 'patronage', 'o': 'Answer', 'Answer': '1.2'}
 TEMPLATE: ASK ?sbj ?pred ?obj filter ?obj = num

 Q: the human who is relative of kate spade is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'relative', 'o': 'kate spade', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'human'}}
 TEMPLATE: <?S P O ; ?S InstanceOf Type>

 Q: the sovereign state for diplomatic relation of african union is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'african union', 'p': 'diplomatic relation', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'sovereign state'}}
 TEMPLATE: <S P ?O ; ?O instanceOf Type>

 Q: the state church which start with the letter m is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'state church'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'starts_with', 'o': 'm'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; starts with character >

 Q: there are Answer allegiance to the empire of japan
 SPARQL: lol
 ALIST: {'h': 'count', 'v': 'Answer', 's': 'Answer', 'p': 'allegiance', 'o': 'empire of japan'}
 TEMPLATE: Count ent (ent-pred-obj)

 Q: the kinopoisk person id for stanley donen is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'stanley donen', 'p': 'kinopoisk person id', 'o': 'Answer'}
 TEMPLATE: E REF ?F

 Q: vittorio de sica nominated for an academy award for best supporting actor in Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': '$y0', 's': 'vittorio de sica', 'p': 'nominated for', 'o': '$y0', '$y0': {'h': 'value', 'v': '$y0', 's': '$y0', 'p': 'nominated for', 'o': 'academy award for best supporting actor'}, 't': 'Answer'}
 TEMPLATE: (E pred ?Obj ) prop value

 Q: the language written of romy schneider with third-person plural is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': 'romy schneider', 'p': 'language written', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'has grammatical person', 'o': 'third-person plural'}}
 TEMPLATE: E REF ?F . ?F RFG G

 Q: the operating income of qantas is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'qantas', 'p': 'operating income', 'o': 'Answer'}
 TEMPLATE: E REF ?F

 Q: the name of military museum in les invalided with the highest number of visitors per year is Answer
 SPARQL: lol
 ALIST: {'h': 'max', 'v': '$y0', 's': 'Answer', 'p': 'visitors per year', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'military museum', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'location', 'o': 'les invalides'}}}
 TEMPLATE: ?E is_a Type. ?E pred Obj. ?E-secondClause value. MAX (value)

 Q: the genus with the highest chromosome count in the taxon rank is Answer
 SPARQL: lol
 ALIST: {'h': 'max', 'v': '$y0', 's': 'Answer', 'p': 'chromosome count', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'taxon', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'taxon rank', 'o': 'genus'}}}
 TEMPLATE: ?E is_a Type. ?E pred Obj. ?E-secondClause value. MAX (value)

 Q: the position held of félix faure that is replaced by is émile loubet is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'position held', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'félix faure', 'p': 'position held', 'o': '$y0', '$y0': {'h': 'value', 'v': '$y0', 's': '$y0', 'p': 'replaced by', 'o': 'émile loubet'}}}
 TEMPLATE: (E pred F) prop ?value

 Q: the product of the automotive industry that is similar to a power-driven vehicle is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': 'automotive industry', 'p': 'product', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'similar to', 'o': 'power-driven vehicle'}}
 TEMPLATE: E REF ?F . ?F RFG G

 Q: the country started in the year 1871 in wiesbaden is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': 'wiesbaden', 'p': 'country', 'o': 'Answer', 't': '1871'}
 TEMPLATE: (E pred F) prop ?value

 Q: the leader of party membership of martin dinha is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'leader', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'martin dinha', 'p': 'party', 'o': '$y0'}}
 TEMPLATE: C RCD xD . xD RDE ?E

 Q: excipient that part carbon has the lowest refractive index is Answer
 SPARQL: lol
 ALIST: {'h': 'min', 'v': '$y0', 's': 'Answer', 'p': 'refractive index', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'excipient', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'has part', 'o': 'carbon'}}}
 TEMPLATE: ?E is_a Type. ?E pred Obj. ?E-secondClause value. MIN (value)

 Q: the aspect of mysticism which is distinguished from dharma is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': 'mysticism', 'p': 'aspect of', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'distinguished from', 'o': 'dharma'}}
 TEMPLATE: E REF ?F . ?F RFG G

 Q: the shortest duration color film is Answer
 SPARQL: lol
 ALIST: {'h': 'min', 'v': '$y0', 's': 'Answer', 'p': 'duration', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'film', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'color', 'o': 'color'}}}
 TEMPLATE: ?E is_a Type. ?E pred Obj. ?E-secondClause value. MIN (value)

 Q: the military designation of c-130 hercules is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'hercules', 'p': 'military designation', 'o': 'Answer'}
 TEMPLATE: E REF ?F

 Q: there are Answer teams are participating for chicago bulls
 SPARQL: lol
 ALIST: {'h': 'count', 'v': 'Answer', 's': 'Answer', 'p': 'teams', 'o': 'chicago bulls'}
 TEMPLATE: Count ent (ent-pred-obj)

 Q: the fault of nazca plate is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'fault', 'o': 'nazca plate'}
 TEMPLATE: ?D RDE E

 Q: the tributary of the oka river which can be found at the gps location of 37.0012 is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': 'oka', 'p': 'tributary', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'location', 'o': '37.0012'}}
 TEMPLATE: E REF ?F . ?F RFG G

 Q: the cola starts with the letter p is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'cola'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'starts_with', 'o': 'p'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; starts with character >

 Q: the austrian municipality key of klagenfurt is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'klagenfurt', 'p': 'austrian municipality key', 'o': 'Answer'}
 TEMPLATE: E REF ?F

 Q: the twin town of principle office of financial times is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'twin town', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'financial times', 'p': 'principle office', 'o': '$y0'}}
 TEMPLATE: E REF xF . xF RFG ?G

 Q: it is Answer that the enthalpy of vaporization of methanol is equal to 37400
 SPARQL: lol
 ALIST: {'h': 'equal', 'v': 'Answer', 's': 'methanol', 'p': 'enthalpy of vaporization', 'o': 'Answer', 'Answer': '37400'}
 TEMPLATE: ASK ?sbj ?pred ?obj filter ?obj = num

 Q: the temperature on river of iberian peninsula is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'temperature', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'iberian peninsula', 'p': 'on river', 'o': '$y0'}}
 TEMPLATE: E REF xF . xF RFG ?G

 Q: the landlocked country which has the highest gdp ppp is Answer
 SPARQL: lol
 ALIST: {'h': 'max', 'v': '$y0', 's': 'Answer', 'p': 'gdp ppp', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'landlocked country'}}
 TEMPLATE: ?E is_a Type, ?E pred Obj  value. MAX/MIN (value)

 Q: the spacecraft with the longest orbital period is Answer
 SPARQL: lol
 ALIST: {'h': 'max', 'v': '$y0', 's': 'Answer', 'p': 'orbital period', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'spacecraft'}}
 TEMPLATE: ?E is_a Type, ?E pred Obj  value. MAX/MIN (value)

 Q: the people who participated in deep blue with top dog cray blitz is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': 'deep blue', 'p': 'participated in', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'top dog', 'o': 'cray blitz'}}
 TEMPLATE: E REF ?F . ?F RFG G

 Q: there are Answer occupations are by shah
 SPARQL: lol
 ALIST: {'h': 'count', 'v': 'Answer', 's': 'Answer', 'p': 'occupation', 'o': 'shah'}
 TEMPLATE: Count ent (ent-pred-obj)

 Q: the engine family with the highest compression ratio is Answer
 SPARQL: lol
 ALIST: {'h': 'max', 'v': '$y0', 's': 'Answer', 'p': 'compression ratio', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'engine family'}}
 TEMPLATE: ?E is_a Type, ?E pred Obj  value. MAX/MIN (value)

 Q: the speakers of language of working languages of kingdom of england is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'speakers of language', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'kingdom of england', 'p': 'working languages', 'o': '$y0'}}
 TEMPLATE: E REF xF . xF RFG ?G

 Q: the velká pardubická with the lowest race time whose winner is peter gehm is Answer
 SPARQL: lol
 ALIST: {'h': 'min', 'v': '$y0', 's': 'Answer', 'p': 'race time', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'velká pardubická', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'winner', 'o': 'peter gehm'}}}
 TEMPLATE: ?E is_a Type. ?E pred Obj. ?E-secondClause value. MIN (value)

 Q: the country in significant event of indian independence movement is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'significant event', 'o': 'indian independence movement', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'country'}}
 TEMPLATE: <?S P O ; ?S InstanceOf Type>

 Q: the rxnorm cui of palladium is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'palladium', 'p': 'rxnorm cui', 'o': 'Answer'}
 TEMPLATE: E REF ?F

 Q: the twin city of basel with establishment date 751-0-0 is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': 'basel', 'p': 'twin city', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'establishment date', 'o': '751-0-0'}}
 TEMPLATE: E REF ?F . ?F RFG G

 Q: the stone bridge with the longest span is Answer
 SPARQL: lol
 ALIST: {'h': 'max', 'v': '$y0', 's': 'Answer', 'p': 'longest span', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'stone bridge'}}
 TEMPLATE: ?E is_a Type, ?E pred Obj  value. MAX/MIN (value)

 Q: the ionization energy of the nicotine is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'nicotine', 'p': 'ionization energy', 'o': 'Answer'}
 TEMPLATE: E REF ?F

 Q: the physical phenomenon whose name has the word surface is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'physical phenomenon'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'contains', 'o': 'surface'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; contains word >

 Q: the population of lucknow in 2011 was Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': 'lucknow', 'p': 'population', 'o': 'Answer', 't': '2011'}
 TEMPLATE: (E pred F) prop ?value

 Q: the club manager of actress of wrestlemania iii is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'manager', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'wrestlemania iii', 'p': 'actress', 'o': '$y0'}}
 TEMPLATE: C RCD xD . xD RDE ?E

 Q: the capital of the tran dynasty which has a position of 105.841 is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': 'tran dynasty', 'p': 'capital', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'position', 'o': '105.841'}}
 TEMPLATE: E REF ?F . ?F RFG G

 Q: the mythical character that contains the word zau in its name is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'mythical character'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'contains', 'o': 'zau'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; contains word >

 Q: it is Answer that right ascension of malin 1 less than 15.1398
 SPARQL: lol
 ALIST: {'h': 'less', 'v': 'Answer', 's': 'malin 1', 'p': 'right ascension', 'o': 'Answer', 'Answer': '15.1398'}
 TEMPLATE: ASK ?sbj ?pred ?obj filter ?obj = num

 Q: the software version of perl which was published in 2014 is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': 'perl', 'p': 'version', 'o': 'Answer', 't': '2014'}
 TEMPLATE: (E pred F) prop ?value

 Q: the religious affiliation of child of vladimir the great is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'religious affiliation', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'vladimir the great', 'p': 'child of', 'o': '$y0'}}
 TEMPLATE: E REF xF . xF RFG ?G

 Q: the combination classification for chris froome is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'combination classification', 'o': 'chris froome'}
 TEMPLATE: ?D RDE E

 Q: the musical instrument of lyricist of face to the sky is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'instrument', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'face to the sky', 'p': 'lyricist', 'o': '$y0'}}
 TEMPLATE: C RCD xD . xD RDE ?E

 Q: the preceeds of implies of vaporization is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'preceeds', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'vaporization', 'p': 'implies', 'o': '$y0'}}
 TEMPLATE: E REF xF . xF RFG ?G

 Q: ambrose burnside wears Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'ambrose burnside', 'p': 'wears', 'o': 'Answer'}
 TEMPLATE: E REF ?F

 Q: the unit of measurement which start with the letter visus is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'unit of measurement'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'contains', 'o': 'visus'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; contains word >

 Q: it is Answer that the annual energy output of the greater gabbard wind farm equal to 1800
 SPARQL: lol
 ALIST: {'h': 'equal', 'v': 'Answer', 's': 'greater gabbard wind farm', 'p': 'annual energy output', 'o': 'Answer', 'Answer': '1800'}
 TEMPLATE: ASK ?sbj ?pred ?obj filter ?obj = num

 Q: the anatomical location of the cerebellum is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'anatomical location', 'o': 'cerebellum'}
 TEMPLATE: ?D RDE E

 Q: the reference model whose name has the word model in it is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'reference model'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'contains', 'o': 'model'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; contains word >

 Q: the lagoon from chile with the lowest residence time of water is Answer
 SPARQL: lol
 ALIST: {'h': 'min', 'v': '$y0', 's': 'Answer', 'p': 'residence time of water', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'lagoon', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'country', 'o': 'chile'}}}
 TEMPLATE: ?E is_a Type. ?E pred Obj. ?E-secondClause value. MIN (value)

 Q: the galaxy cluster with the lowest flux whose constellation is virgo is Answer
 SPARQL: lol
 ALIST: {'h': 'min', 'v': '$y0', 's': 'Answer', 'p': 'flux', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'galaxy cluster', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'constellation', 'o': 'virgo'}}}
 TEMPLATE: ?E is_a Type. ?E pred Obj. ?E-secondClause value. MIN (value)

 Q: the music genre which is developed by battle zeque den is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'genre', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'battle zeque den', 'p': 'developed by', 'o': '$y0'}}
 TEMPLATE: C RCD xD . xD RDE ?E

 Q: it is Answer that the valency of monotransitive verb equals to 2
 SPARQL: lol
 ALIST: {'h': 'equal', 'v': 'Answer', 's': 'monotransitive verb', 'p': 'valency', 'o': 'Answer', 'Answer': '2'}
 TEMPLATE: ASK ?sbj ?pred ?obj filter ?obj = num

 Q: the diplomatic relation of sovereign state of university of iowa is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'diplomatic relation', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'university of iowa', 'p': 'state', 'o': '$y0'}}
 TEMPLATE: E REF xF . xF RFG ?G

 Q: the capital for twinned administrative body of mumbai is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'mumbai', 'p': 'twinned administrative body', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'capital'}}
 TEMPLATE: <S P ?O ; ?O instanceOf Type>

 Q: it is Answer that the target interest rate of central bank of azerbaijan equal to 5.25
 SPARQL: lol
 ALIST: {'h': 'equal', 'v': 'Answer', 's': 'central bank of azerbaijan', 'p': 'target interest rate', 'o': 'Answer', 'Answer': '5.25'}
 TEMPLATE: ASK ?sbj ?pred ?obj filter ?obj = num

 Q: the historical country for country of golden horde is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'golden horde', 'p': 'country', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'historical country'}}
 TEMPLATE: <S P ?O ; ?O instanceOf Type>

 Q: the programming language implementation starts with the letter y is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'programming language implementation'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'starts_with', 'o': 'y'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; starts with character >

 Q: the name of a fantastique genre that starts with the letter s is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'fantastique genre'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'starts_with', 'o': 's'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; starts with character >

 Q: the inventor or discoverer of dobsonian telescope who was born in beijing is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': 'dobsonian telescope', 'p': 'inventor', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'location of birth', 'o': 'beijing'}}
 TEMPLATE: E REF ?F . ?F RFG G

 Q: there are Answer categories contains castle
 SPARQL: lol
 ALIST: {'h': 'count', 'v': 'Answer', 's': 'Answer', 'p': 'category contains', 'o': 'castle'}
 TEMPLATE: Count ent (ent-pred-obj)

 Q: the geographic region of asia with the highest number of out of school children is Answer
 SPARQL: lol
 ALIST: {'h': 'max', 'v': '$y0', 's': 'Answer', 'p': 'number of out of school children', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'geographic region', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'part of', 'o': 'asia'}}}
 TEMPLATE: ?E is_a Type. ?E pred Obj. ?E-secondClause value. MAX (value)

 Q: the family of vehicles starts with the letter v is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'family of vehicles'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'starts_with', 'o': 'v'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; starts with character >

 Q: the contents of the puzzle are Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'contents', 'o': 'puzzle'}
 TEMPLATE: ?D RDE E

 Q: the chemical compound which has the highest acceptable daily intake is Answer
 SPARQL: lol
 ALIST: {'h': 'max', 'v': '$y0', 's': 'Answer', 'p': 'acceptable daily intake', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'chemical compound'}}
 TEMPLATE: ?E is_a Type, ?E pred Obj  value. MAX/MIN (value)

 Q: the referee for earl strom is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'referee', 'o': 'earl strom'}
 TEMPLATE: ?D RDE E

 Q: the dialect of ancient greek is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'ancient greek', 'p': 'dialect', 'o': 'Answer'}
 TEMPLATE: E REF ?F

 Q: the athletics for owner of of stanford university is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'stanford university', 'p': 'owner of', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'athletics'}}
 TEMPLATE: <S P ?O ; ?O instanceOf Type>

 Q: the city became a twin city of klagenfurt in 1990 is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': 'klagenfurt', 'p': 'twin city', 'o': 'Answer', 't': '1990'}
 TEMPLATE: (E pred F) prop ?value

 Q: the edition of game platform of second life is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'edition', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'second life', 'p': 'platform', 'o': '$y0'}}
 TEMPLATE: E REF xF . xF RFG ?G

 Q: it is Answer that true that the residence time of water in tai lake equals 0.79
 SPARQL: lol
 ALIST: {'h': 'equal', 'v': 'Answer', 's': 'tai lake', 'p': 'residence time of water', 'o': 'Answer', 'Answer': '0.79'}
 TEMPLATE: ASK ?sbj ?pred ?obj filter ?obj = num

 Q: the brand which is the manufacturer of spacex is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'manufacturer', 'o': 'spacex', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'brand'}}
 TEMPLATE: <?S P O ; ?S InstanceOf Type>

 Q: the taxon which has the longest generation time is Answer
 SPARQL: lol
 ALIST: {'h': 'max', 'v': '$y0', 's': 'Answer', 'p': 'generation time', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'taxon'}}
 TEMPLATE: ?E is_a Type, ?E pred Obj  value. MAX/MIN (value)

 Q: there are Answer time periods are carboniferous
 SPARQL: lol
 ALIST: {'h': 'count', 'v': 'Answer', 's': 'Answer', 'p': 'time period', 'o': 'carboniferous'}
 TEMPLATE: Count ent (ent-pred-obj)

 Q: the native language of vincent auriol is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'vincent auriol', 'p': 'native language', 'o': 'Answer'}
 TEMPLATE: E REF ?F

 Q: the colour of team of maurice wellock is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'colour', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'maurice wellock', 'p': 'team', 'o': '$y0'}}
 TEMPLATE: C RCD xD . xD RDE ?E

 Q: there are Answer members of international hydrographic organization
 SPARQL: lol
 ALIST: {'h': 'count', 'v': 'Answer', 's': 'Answer', 'p': 'member of', 'o': 'international hydrographic organization'}
 TEMPLATE: Count ent (ent-pred-obj)

 Q: the physical quantity whose name has the word work in it is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'physical quantity'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'contains', 'o': 'work'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; contains word >

 Q: supernatural won the favorite pop/rock album award in Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': '$y0', 's': 'supernatural', 'p': 'award', 'o': '$y0', '$y0': {'h': 'value', 'v': '$y0', 's': '$y0', 'p': 'award', 'o': 'favorite pop/rock album'}, 't': 'Answer'}
 TEMPLATE: (E pred ?Obj ) prop value

 Q: the church which is located in the parish border krukengrund is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'border', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'krukengrund', 'p': 'is located in', 'o': '$y0'}}
 TEMPLATE: C RCD xD . xD RDE ?E

 Q: the mathematical formula of the shape of the cooling tower is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'formula', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'cooling tower', 'p': 'shape', 'o': '$y0'}}
 TEMPLATE: E REF xF . xF RFG ?G

 Q: the category for recipients of this award of honor is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'category for recipients of this award', 'o': 'honor'}
 TEMPLATE: ?D RDE E

 Q: the taxon which has the highest heart rate is Answer
 SPARQL: lol
 ALIST: {'h': 'max', 'v': '$y0', 's': 'Answer', 'p': 'heart rate', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'taxon'}}
 TEMPLATE: ?E is_a Type, ?E pred Obj  value. MAX/MIN (value)

 Q: the natural product of taxon from mammuthus is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'natural product of taxon', 'o': 'mammuthus'}
 TEMPLATE: ?D RDE E

 Q: it is Answer that century breaks of the colm gilcreest equal or less than 9.6
 SPARQL: lol
 ALIST: {'h': 'less', 'v': 'Answer', 's': 'colm gilcreest', 'p': 'century breaks', 'o': 'Answer', 'Answer': '9.6'}
 TEMPLATE: ASK ?sbj ?pred ?obj filter ?obj = num

 Q: the os grid reference of bradford is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'bradford', 'p': 'os grid reference', 'o': 'Answer'}
 TEMPLATE: E REF ?F

 Q: the fifa player id for stanislav cherchesov is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'stanislav cherchesov', 'p': 'fifa player id', 'o': 'Answer'}
 TEMPLATE: E REF ?F

 Q: the method that the census used to determine the population of taguig is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'population', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'taguig', 'p': 'population', 'o': '$y0', '$y0': {'h': 'value', 'v': '$y0', 's': '$y0', 'p': 'method', 'o': 'census'}}}
 TEMPLATE: (E pred F) prop ?value

 Q: the chemical element of subclass period 5 has the highest density is Answer
 SPARQL: lol
 ALIST: {'h': 'max', 'v': '$y0', 's': 'Answer', 'p': 'density', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'chemical element', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'subclass of', 'o': 'period 5'}}}
 TEMPLATE: ?E is_a Type. ?E pred Obj. ?E-secondClause value. MAX (value)

 Q: the parent organization of bayer in 1925 is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': 'bayer', 'p': 'parent organization', 'o': 'Answer', 't': '1925'}
 TEMPLATE: (E pred F) prop ?value

 Q: bell hooks was educated at stanford university in Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': '$y0', 's': 'bell hooks', 'p': 'educated at', 'o': '$y0', '$y0': {'h': 'value', 'v': '$y0', 's': '$y0', 'p': 'educated at', 'o': 'stanford university'}, 't': 'Answer'}
 TEMPLATE: (E pred ?Obj ) prop value

 Q: the brain region that contains the word thalamus in its name is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'brain region'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'contains', 'o': 'thalamus'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; contains word >

 Q: the commemorative coin with the lowest face value is made of gold is Answer
 SPARQL: lol
 ALIST: {'h': 'min', 'v': '$y0', 's': 'Answer', 'p': 'face value', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'commemorative coin', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'made of', 'o': 'gold'}}}
 TEMPLATE: ?E is_a Type. ?E pred Obj. ?E-secondClause value. MIN (value)

 Q: the silent short film with the longest duration is Answer
 SPARQL: lol
 ALIST: {'h': 'max', 'v': '$y0', 's': 'Answer', 'p': 'duration', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'silent short film'}}
 TEMPLATE: ?E is_a Type, ?E pred Obj  value. MAX/MIN (value)

 Q: the literary genre whose name has the word vita in it is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'literary genre'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'contains', 'o': 'vita'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; contains word >

 Q: the the general manager of bernard hinault is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'general manager', 'o': 'bernard hinault'}
 TEMPLATE: ?D RDE E

 Q: the significant person of frederick douglass is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'significant person', 'o': 'frederick douglass'}
 TEMPLATE: ?D RDE E

 Q: the record label signed janet jackson is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'janet jackson', 'p': 'record label', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'record label'}}
 TEMPLATE: <S P ?O ; ?O instanceOf Type>

 Q: the middle name of dan carter which has pronunciation audio pl-daniel.ogg is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': 'dan carter', 'p': 'middle name', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'pronunciation audio', 'o': 'pl-daniel.ogg'}}
 TEMPLATE: E REF ?F . ?F RFG G

 Q: the taxon rank for class is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'taxon rank', 'o': 'class'}
 TEMPLATE: ?D RDE E

 Q: the fuel system of electricity is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'fuel system', 'o': 'electricity'}
 TEMPLATE: ?D RDE E

 Q: the notation which start with the letter s is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'notation'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'starts_with', 'o': 's'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; starts with character >

 Q: the strain with the maximum viable temperature is Answer
 SPARQL: lol
 ALIST: {'h': 'max', 'v': '$y0', 's': 'Answer', 'p': 'maximum viable temperature', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'strain'}}
 TEMPLATE: ?E is_a Type, ?E pred Obj  value. MAX/MIN (value)

 Q: the ordinal number of season begins of handball-bundesliga is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'number', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'handball-bundesliga', 'p': 'season begins', 'o': '$y0'}}
 TEMPLATE: E REF xF . xF RFG ?G

 Q: the basketball-reference.com nba player id of hakeem olajuwon is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'hakeem olajuwon', 'p': 'basketball-reference.com nba player id', 'o': 'Answer'}
 TEMPLATE: E REF ?F

 Q: the fictional analog of hippocampus is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'fictional analog of', 'o': 'hippocampus'}
 TEMPLATE: ?D RDE E

 Q: the film production company which was founded by oprah winfrey is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'founded by', 'o': 'oprah winfrey', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'film production company'}}
 TEMPLATE: <?S P O ; ?S InstanceOf Type>

 Q: the name of the hometown of hello kitty with postal code n is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': 'hello kitty', 'p': 'hometown', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'postal code', 'o': 'n'}}
 TEMPLATE: E REF ?F . ?F RFG G

 Q: le corbusier won the frank p. brown medal in Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': '$y0', 's': 'le corbusier', 'p': 'win', 'o': '$y0', '$y0': {'h': 'value', 'v': '$y0', 's': '$y0', 'p': 'win', 'o': 'frank p. brown medal'}, 't': 'Answer'}
 TEMPLATE: (E pred ?Obj ) prop value

 Q: the brother-in-law of writer quran is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'brother-in-law', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'quran', 'p': 'writer', 'o': '$y0'}}
 TEMPLATE: C RCD xD . xD RDE ?E

 Q: the neighborhood for shares border of los angeles is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'los angeles', 'p': 'shares border with', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'neighborhood'}}
 TEMPLATE: <S P ?O ; ?O instanceOf Type>

 Q: there are Answer file formats are done on portable document format
 SPARQL: lol
 ALIST: {'h': 'count', 'v': 'Answer', 's': 'Answer', 'p': 'file format', 'o': 'portable document format'}
 TEMPLATE: Count ent (ent-pred-obj)

 Q: the ester which has the highest flash point is Answer
 SPARQL: lol
 ALIST: {'h': 'max', 'v': '$y0', 's': 'Answer', 'p': 'flash point', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'ester'}}
 TEMPLATE: ?E is_a Type, ?E pred Obj  value. MAX/MIN (value)

 Q: the name of a novel series that starts with the letter t is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'novel series'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'starts_with', 'o': 't'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; starts with character >

 Q: the biopharmaceutical encoded by ins is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'encoded by', 'o': 'ins', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'biopharmaceutical'}}
 TEMPLATE: <?S P O ; ?S InstanceOf Type>

 Q: the city for capital of wales is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'wales', 'p': 'capital', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'city'}}
 TEMPLATE: <S P ?O ; ?O instanceOf Type>

 Q: the grants academic degrees for master of business administration is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'grants', 'o': 'master of business administration'}
 TEMPLATE: ?D RDE E

 Q: the hole that contains the word d is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'hole'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'starts_with', 'o': 'd'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; starts with character >

 Q: there are Answer terminus locations are california
 SPARQL: lol
 ALIST: {'h': 'count', 'v': 'Answer', 's': 'Answer', 'p': 'terminus location', 'o': 'california'}
 TEMPLATE: Count ent (ent-pred-obj)

 Q: the bibliography of the advisor of karl herzfeld is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'bibliography', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'karl herzfeld', 'p': 'advisor', 'o': '$y0'}}
 TEMPLATE: C RCD xD . xD RDE ?E

 Q: the human settlement for patron saint of joseph is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'patron saint', 'o': 'joseph', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'human settlement'}}
 TEMPLATE: <?S P O ; ?S InstanceOf Type>

 Q: the dredger with the highest payload mass is Answer
 SPARQL: lol
 ALIST: {'h': 'max', 'v': '$y0', 's': 'Answer', 'p': 'payload mass', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'dredger'}}
 TEMPLATE: ?E is_a Type. ?E pred Obj. ?E-secondClause value. MAX (value)

 Q: it is Answer that the maximum wavelength of sensitivity of the human eye equal to 700
 SPARQL: lol
 ALIST: {'h': 'equal', 'v': 'Answer', 's': 'human eye', 'p': 'maximum wavelength of sensitivity', 'o': 'Answer', 'Answer': '700'}
 TEMPLATE: ASK ?sbj ?pred ?obj filter ?obj = num

 Q: the sexual orientation for asexuality is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'sexual orientation', 'o': 'asexuality'}
 TEMPLATE: ?D RDE E

 Q: the timezone of death location of sallust is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'timezone', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'sallust', 'p': 'death location', 'o': '$y0'}}
 TEMPLATE: E REF xF . xF RFG ?G

 Q: the people who is the showrunner of the apprentice and has a sister called robert trump is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': 'the apprentice', 'p': 'showrunner', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'sister', 'o': 'robert trump'}}
 TEMPLATE: E REF ?F . ?F RFG G

 Q: the color index of alpha centauri is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'alpha centauri', 'p': 'color index', 'o': 'Answer'}
 TEMPLATE: E REF ?F

 Q: the name of the continent of the mountain belt in mount caywood is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'continent', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'mount caywood', 'p': 'mountain belt', 'o': '$y0'}}
 TEMPLATE: C RCD xD . xD RDE ?E

 Q: there are Answer terminus are in vienna
 SPARQL: lol
 ALIST: {'h': 'count', 'v': 'Answer', 's': 'Answer', 'p': 'terminus', 'o': 'vienna'}
 TEMPLATE: Count ent (ent-pred-obj)

 Q: there are Answer military casualty classification are in the prisoner of war
 SPARQL: lol
 ALIST: {'h': 'count', 'v': 'Answer', 's': 'Answer', 'p': 'military casualty classification', 'o': 'prisoner of war'}
 TEMPLATE: Count ent (ent-pred-obj)

 Q: the cpdl id of vivaldi is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'vivaldi', 'p': 'cpdl id', 'o': 'Answer'}
 TEMPLATE: E REF ?F

 Q: the type of food or dish that contains the word torta in its name is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'type of food or dish'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'contains', 'o': 'torta'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; contains word >

 Q: the urban municipality of germany for twinned administrative body of cardiff is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'cardiff', 'p': 'twinned administrative body', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'urban municipality of germany'}}
 TEMPLATE: <S P ?O ; ?O instanceOf Type>

 Q: the teacher of supervisor of shigeno yasutsugu is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'teacher of', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'shigeno yasutsugu', 'p': 'teacher', 'o': '$y0'}}
 TEMPLATE: C RCD xD . xD RDE ?E

 Q: the aircraft family with the highest maximum glide ratio and with manufacturer grob aircraft is Answer
 SPARQL: lol
 ALIST: {'h': 'max', 'v': '$y0', 's': 'Answer', 'p': 'maximum glide ratio', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'aircraft family', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'manufacturer', 'o': 'grob aircraft'}}}
 TEMPLATE: ?E is_a Type. ?E pred Obj. ?E-secondClause value. MAX (value)

 Q: the railroad with the maximum gradient is Answer
 SPARQL: lol
 ALIST: {'h': 'max', 'v': '$y0', 's': 'Answer', 'p': 'maximum gradient', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'railroad'}}
 TEMPLATE: ?E is_a Type, ?E pred Obj  value. MAX/MIN (value)

 Q: the periodical literature for mouthpiece of delta air lines is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'delta air lines', 'p': 'mouthpiece', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'periodical'}}
 TEMPLATE: <S P ?O ; ?O instanceOf Type>

 Q: the skill that starts with the letter s is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'skill'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'starts_with', 'o': 's'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; starts with character >

 Q: the birthplace of konrad adenauer which is bordered by the rhein-berg district is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': 'konrad adenauer', 'p': 'birthplace', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'bordered by', 'o': 'rhein-berg district'}}
 TEMPLATE: E REF ?F . ?F RFG G

 Q: it is Answer that the conversion to si unit of the statcoulomb is greater than 2.6685128e-10
 SPARQL: lol
 ALIST: {'h': 'greater', 'v': 'Answer', 's': 'statcoulomb', 'p': 'conversion to si unit', 'o': 'Answer', 'Answer': '2.6685128e-10'}
 TEMPLATE: ASK ?sbj ?pred ?obj filter ?obj = num

 Q: the magazine starts with z is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'magazine'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'starts_with', 'o': 'z'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; starts with character >

 Q: the coachwork type which start with the letter van is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'coachwork type'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'contains', 'o': 'van'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; contains word >

 Q: there are Answer protocols in the internet protocol version 4
 SPARQL: lol
 ALIST: {'h': 'count', 'v': 'Answer', 's': 'Answer', 'p': 'protocol', 'o': 'internet protocol version 4'}
 TEMPLATE: Count ent (ent-pred-obj)

 Q: the darts database player id of phil taylor is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'phil taylor', 'p': 'darts database player id', 'o': 'Answer'}
 TEMPLATE: E REF ?F

 Q: the winged horse which start with the letter p is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'winged horse'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'starts_with', 'o': 'p'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; starts with character >

 Q: the chemical compound which has the most binding energy is Answer
 SPARQL: lol
 ALIST: {'h': 'max', 'v': '$y0', 's': 'Answer', 'p': 'binding energy', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'chemical compound'}}
 TEMPLATE: ?E is_a Type, ?E pred Obj  value. MAX/MIN (value)

 Q: the reserve currency with the highest price is Answer
 SPARQL: lol
 ALIST: {'h': 'max', 'v': '$y0', 's': 'Answer', 'p': 'price', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'reserve currency'}}
 TEMPLATE: ?E is_a Type, ?E pred Obj  value. MAX/MIN (value)

 Q: the local dialling code of publication region of the dallas morning news is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'dialling code', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'dallas morning news', 'p': 'publication region', 'o': '$y0'}}
 TEMPLATE: E REF xF . xF RFG ?G

 Q: the country that is a member of the international centre for settlement of investment disputes has the most gdp is Answer
 SPARQL: lol
 ALIST: {'h': 'max', 'v': '$y0', 's': 'Answer', 'p': 'gdp', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'country', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'member of', 'o': 'international centre for settlement of investment disputes'}}}
 TEMPLATE: ?E is_a Type. ?E pred Obj. ?E-secondClause value. MAX (value)

 Q: the person whose military branch is kgb is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'military branch', 'o': 'kgb', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'person'}}
 TEMPLATE: <?S P O ; ?S InstanceOf Type>

 Q: there are Answer films are edited by david lynch
 SPARQL: lol
 ALIST: {'h': 'count', 'v': 'Answer', 's': 'Answer', 'p': 'edited by', 'o': 'david lynch'}
 TEMPLATE: Count ent (ent-pred-obj)

 Q: the world heritage tentative list id of university of tehran is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'university of tehran', 'p': 'world heritage tentative list id', 'o': 'Answer'}
 TEMPLATE: E REF ?F

 Q: the bps language code of sundanese is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'sundanese', 'p': 'bps language code', 'o': 'Answer'}
 TEMPLATE: E REF ?F

 Q: the stepparent of johnny cash is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'stepparent', 'o': 'johnny cash', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'human'}}
 TEMPLATE: <?S P O ; ?S InstanceOf Type>

 Q: the business enterprise with the highest maximum gradient is Answer
 SPARQL: lol
 ALIST: {'h': 'max', 'v': '$y0', 's': 'Answer', 'p': 'maximum gradient', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'business'}}
 TEMPLATE: ?E is_a Type. ?E pred Obj. ?E-secondClause value. MAX (value)

 Q: the division for which jurandir fatori team play is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'division', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'jurandir fatori', 'p': 'team', 'o': '$y0'}}
 TEMPLATE: C RCD xD . xD RDE ?E

 Q: the public company that has the material produced of coca-cola is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'material produced', 'o': 'coca-cola', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'public company'}}
 TEMPLATE: <?S P O ; ?S InstanceOf Type>

 Q: the cdb chemical id of isopropyl alcohol is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'isopropyl alcohol', 'p': 'cdb chemical id', 'o': 'Answer'}
 TEMPLATE: E REF ?F

 Q: the cpu with the fastest fsb speed is Answer
 SPARQL: lol
 ALIST: {'h': 'max', 'v': '$y0', 's': 'Answer', 'p': 'fsb speed', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'cpu'}}
 TEMPLATE: ?E is_a Type, ?E pred Obj  value. MAX/MIN (value)

 Q: the fictional universe described in the matrix is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'fictional universe described in', 'o': 'the matrix', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'fictional universe'}}
 TEMPLATE: <?S P O ; ?S InstanceOf Type>

 Q: the facility of the defensive wall is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'facility', 'o': 'defensive wall'}
 TEMPLATE: ?D RDE E

 Q: in 2014 the population of new haven was Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': 'new haven', 'p': 'population', 'o': 'Answer', 't': '2014'}
 TEMPLATE: (E pred F) prop ?value

 Q: the head of government of palestine in 2014 is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': 'palestine', 'p': 'head of government', 'o': 'Answer', 't': '2014'}
 TEMPLATE: (E pred F) prop ?value

 Q: ignatius of loyola belongs to Answer catholic order
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'ignatius of loyola', 'p': 'order', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'catholic order'}}
 TEMPLATE: <S P ?O ; ?O instanceOf Type>

 Q: the smartphone model of motorola with the highest maximum size or capacity is Answer
 SPARQL: lol
 ALIST: {'h': 'max', 'v': '$y0', 's': 'Answer', 'p': 'maximum size or capacity', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'smartphone model', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'brand', 'o': 'motorola'}}}
 TEMPLATE: ?E is_a Type. ?E pred Obj. ?E-secondClause value. MAX (value)

 Q: it is Answer that the total fertility rate of algeria greater than 3.4284
 SPARQL: lol
 ALIST: {'h': 'greater', 'v': 'Answer', 's': 'algeria', 'p': 'total fertility rate', 'o': 'Answer', 'Answer': '3.4284'}
 TEMPLATE: ASK ?sbj ?pred ?obj filter ?obj = num

 Q: the international organization for subsidiary of world bank is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'world bank', 'p': 'subsidiary', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'international organization'}}
 TEMPLATE: <S P ?O ; ?O instanceOf Type>

 Q: it is Answer that the service life of the ambatovy mine equals 29
 SPARQL: lol
 ALIST: {'h': 'equal', 'v': 'Answer', 's': 'ambatovy mine', 'p': 'service life', 'o': 'Answer', 'Answer': '29'}
 TEMPLATE: ASK ?sbj ?pred ?obj filter ?obj = num

 Q: jacinda ardern belongs to Answer political party
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'jacinda ardern', 'p': 'party', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'political party'}}
 TEMPLATE: <S P ?O ; ?O instanceOf Type>

 Q: the mississippi sports hall of fame id of brett favre is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'brett favre', 'p': 'mississippi sports hall of fame id', 'o': 'Answer'}
 TEMPLATE: E REF ?F

 Q: the allegiance of mughal empire is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'allegiance', 'o': 'mughal empire'}
 TEMPLATE: ?D RDE E

 Q: destroyer with the largest draft is Answer
 SPARQL: lol
 ALIST: {'h': 'max', 'v': '$y0', 's': 'Answer', 'p': 'draft', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'destroyer'}}
 TEMPLATE: ?E is_a Type. ?E pred Obj. ?E-secondClause value. MAX (value)

 Q: the monastery for headquarters location of russian orthodox church is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'russian orthodox church', 'p': 'headquarters location', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'monastery'}}
 TEMPLATE: <S P ?O ; ?O instanceOf Type>

 Q: it is Answer that the age of majority of the usa equal to t1410874016
 SPARQL: lol
 ALIST: {'h': 'equal', 'v': 'Answer', 's': 'usa', 'p': 'age of majority', 'o': 'Answer', 'Answer': 't1410874016'}
 TEMPLATE: ASK ?sbj ?pred ?obj filter ?obj = num

 Q: the stock exchange for the ticker symbol 0700 in tencent is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'stock exchange', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'tencent', 'p': 'stock exchange', 'o': '$y0', '$y0': {'h': 'value', 'v': '$y0', 's': '$y0', 'p': 'ticker symbol', 'o': '0700'}}}
 TEMPLATE: (E pred F) prop ?value

 Q: there are Answer original languages are malagasy
 SPARQL: lol
 ALIST: {'h': 'count', 'v': 'Answer', 's': 'Answer', 'p': 'original language', 'o': 'malagasy'}
 TEMPLATE: Count ent (ent-pred-obj)

 Q: the temperature of toxaphene with density of 1.65 is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'temperature', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'toxaphene', 'p': 'density', 'o': '$y0', '$y0': {'h': 'value', 'v': '$y0', 's': '$y0', 'p': 'density', 'o': '1.65'}}}
 TEMPLATE: (E pred ?Obj ) prop value

 Q: the theorem proved by grigori perelman is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'proved by', 'o': 'grigori perelman', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'theorem'}}
 TEMPLATE: <?S P O ; ?S InstanceOf Type>

 Q: the musical score by missa solemnis that has mother maria magdalena van beethoven is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': 'missa solemnis', 'p': 'musical score by', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'mother', 'o': 'maria magdalena van beethoven'}}
 TEMPLATE: E REF ?F . ?F RFG G

 Q: the character role of turandot is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'character role', 'o': 'turandot'}
 TEMPLATE: ?D RDE E

 Q: the executive authority of play snowboard is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'authority', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'snowboard', 'p': 'play', 'o': '$y0'}}
 TEMPLATE: E REF xF . xF RFG ?G

 Q: it is Answer that the assets under management of the blackrock less than 8146800000.0
 SPARQL: lol
 ALIST: {'h': 'less', 'v': 'Answer', 's': 'blackrock', 'p': 'assets under management', 'o': 'Answer', 'Answer': '8146800000.0'}
 TEMPLATE: ASK ?sbj ?pred ?obj filter ?obj = num

 Q: it is Answer that the number of episodes of mansfield park is greater than 0.8
 SPARQL: lol
 ALIST: {'h': 'greater', 'v': 'Answer', 's': 'mansfield park', 'p': 'number of episodes', 'o': 'Answer', 'Answer': '0.8'}
 TEMPLATE: ASK ?sbj ?pred ?obj filter ?obj = num

 Q: the people who is the doctoral advisor of c. v. raman is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'doctoral advisor', 'o': 'c. v. raman', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'human'}}
 TEMPLATE: <?S P O ; ?S InstanceOf Type>

 Q: the synonym with the highest gestation period is Answer
 SPARQL: lol
 ALIST: {'h': 'max', 'v': '$y0', 's': 'Answer', 'p': 'gestation period', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'synonym'}}
 TEMPLATE: ?E is_a Type. ?E pred Obj. ?E-secondClause value. MAX (value)

 Q: the person who was a student of ivan pavlov is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'ivan pavlov', 'p': 'student of', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'person'}}
 TEMPLATE: <S P ?O ; ?O instanceOf Type>

 Q: Answer is located in the landscape of the scream
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'is located in', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'the scream', 'p': 'landscape of', 'o': '$y0'}}
 TEMPLATE: E REF xF . xF RFG ?G

 Q: there are Answer fastest lap are held by lewis hamilton
 SPARQL: lol
 ALIST: {'h': 'count', 'v': 'Answer', 's': 'Answer', 'p': 'fastest lap', 'o': 'lewis hamilton'}
 TEMPLATE: Count ent (ent-pred-obj)

 Q: the digital rights management system of die is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'digital rights management system', 'o': 'die'}
 TEMPLATE: ?D RDE E

 Q: the largest depth of a lunar crater is Answer
 SPARQL: lol
 ALIST: {'h': 'max', 'v': '$y0', 's': 'Answer', 'p': 'depth', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'lunar crater'}}
 TEMPLATE: ?E is_a Type. ?E pred Obj. ?E-secondClause value. MAX (value)

 Q: the commons gallery of georges seurat is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'georges seurat', 'p': 'commons gallery', 'o': 'Answer'}
 TEMPLATE: E REF ?F

 Q: the people who is the writer of on liberty and has birthday 1806 is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': 'on liberty', 'p': 'writer', 'o': 'Answer', 't': '1806'}
 TEMPLATE: E REF ?F . ?F RFG G

 Q: the postsynaptic connection of frontal lobe is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'postsynaptic connection', 'o': 'frontal lobe'}
 TEMPLATE: ?D RDE E

 Q: the name of the music festival that is based on sanremo music festival and that starts with the letter c is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'music festival', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'based on', 'o': 'sanremo music festival'}}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'starts_with', 'o': 'c'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; starts with character >

 Q: the security agency whose name has the word state in it is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'security agency'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'contains', 'o': 'state'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; contains word >

 Q: the inventory number of guernica is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'guernica', 'p': 'inventory number', 'o': 'Answer'}
 TEMPLATE: E REF ?F

 Q: the animated character that starts name with w is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'animated character'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'starts_with', 'o': 'w'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; starts with character >

 Q: the location of narrative of infinite jest that next to quincy is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': 'infinite jest', 'p': 'location of narrative', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'next to', 'o': 'quincy'}}
 TEMPLATE: E REF ?F . ?F RFG G

 Q: the dynasty that begins with the letter p is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'dynasty'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'starts_with', 'o': 'p'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; starts with character >

 Q: the organization that has it headquarters located in aachen is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'headquarters', 'o': 'aachen', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'organization'}}
 TEMPLATE: <?S P O ; ?S InstanceOf Type>

 Q: the recurring sporting event whose name has the word world in it is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'recurring sporting event'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'contains', 'o': 'world'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; contains word >

 Q: the human for head of state of austrian empire is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'austrian empire', 'p': 'head of state', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'human'}}
 TEMPLATE: <S P ?O ; ?O instanceOf Type>

 Q: the nickname of mike krzyzewski is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'mike krzyzewski', 'p': 'nickname', 'o': 'Answer'}
 TEMPLATE: E REF ?F

 Q: it is Answer that the thermal diffusivity of adobe is less than 0.216
 SPARQL: lol
 ALIST: {'h': 'less', 'v': 'Answer', 's': 'adobe', 'p': 'thermal diffusivity', 'o': 'Answer', 'Answer': '0.216'}
 TEMPLATE: ASK ?sbj ?pred ?obj filter ?obj = num

 Q: the outer planet which has the most flattening is Answer
 SPARQL: lol
 ALIST: {'h': 'max', 'v': '$y0', 's': 'Answer', 'p': 'flattening', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'outer planet'}}
 TEMPLATE: ?E is_a Type, ?E pred Obj  value. MAX/MIN (value)

 Q: the isotope of lutetium with the highest half-life is Answer
 SPARQL: lol
 ALIST: {'h': 'max', 'v': '$y0', 's': 'Answer', 'p': 'half-life', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'isotope of lutetium'}}
 TEMPLATE: ?E is_a Type. ?E pred Obj. ?E-secondClause value. MAX (value)

 Q: there are Answer directions relative to location are to west
 SPARQL: lol
 ALIST: {'h': 'count', 'v': 'Answer', 's': 'Answer', 'p': 'direction relative to location', 'o': 'west'}
 TEMPLATE: Count ent (ent-pred-obj)

 Q: the streaming media url of bjarne stroustrup is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'bjarne stroustrup', 'p': 'streaming media url', 'o': 'Answer'}
 TEMPLATE: E REF ?F

 Q: the excipient whose name has the word xylitol in it is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'excipient'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'contains', 'o': 'xylitol'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; contains word >

 Q: the cover artist for peter blake is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'cover artist', 'o': 'peter blake'}
 TEMPLATE: ?D RDE E

 Q: the film with hayao miyazaki as executive producer is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'executive producer', 'o': 'hayao miyazaki', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'film'}}
 TEMPLATE: <?S P O ; ?S InstanceOf Type>

 Q: the name for incarnation of jesus christ is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'jesus', 'p': 'incarnation of', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'name'}}
 TEMPLATE: <S P ?O ; ?O instanceOf Type>

 Q: pierre de fermat received academic degree as bachelor of laws in Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': '$y0', 's': 'pierre de fermat', 'p': 'academic degree', 'o': '$y0', '$y0': {'h': 'value', 'v': '$y0', 's': '$y0', 'p': 'academic degree', 'o': 'bachelor of laws'}, 't': 'Answer'}
 TEMPLATE: (E pred ?Obj ) prop value

 Q: the cast member who joined sesame street in 1972 is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': 'sesame street', 'p': 'cast member', 'o': 'Answer', 't': '1972'}
 TEMPLATE: (E pred F) prop ?value

 Q: the form of government which start with the letter unicameralism is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'form of government'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'contains', 'o': 'unicameralism'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; contains word >

 Q: the isotope of indium which has the most parity is Answer
 SPARQL: lol
 ALIST: {'h': 'max', 'v': '$y0', 's': 'Answer', 'p': 'parity', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'isotope of indium'}}
 TEMPLATE: ?E is_a Type, ?E pred Obj  value. MAX/MIN (value)

 Q: the cultural area which has the lowest total imports from the significant event harrying of the north is Answer
 SPARQL: lol
 ALIST: {'h': 'min', 'v': '$y0', 's': 'Answer', 'p': 'total imports', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'cultural area', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'significant event', 'o': 'harrying of the north'}}}
 TEMPLATE: ?E is_a Type. ?E pred Obj. ?E-secondClause value. MIN (value)

 Q: there are Answer armaments the aircraft has
 SPARQL: lol
 ALIST: {'h': 'count', 'v': 'Answer', 's': 'Answer', 'p': 'armament', 'o': 'aircraft'}
 TEMPLATE: Count ent (ent-pred-obj)

 Q: it is Answer that the height of the bmw i8 equal 1
 SPARQL: lol
 ALIST: {'h': 'equal', 'v': 'Answer', 's': 'bmw i8', 'p': 'height', 'o': 'Answer', 'Answer': '1'}
 TEMPLATE: ASK ?sbj ?pred ?obj filter ?obj = num

 Q: it is Answer that the number of cylinders of the kkstb 197 equals 2
 SPARQL: lol
 ALIST: {'h': 'equal', 'v': 'Answer', 's': 'kkstb 197', 'p': 'number of cylinders', 'o': 'Answer', 'Answer': '2'}
 TEMPLATE: ASK ?sbj ?pred ?obj filter ?obj = num

 Q: the wikimedia set index article which start with the letter typhoon is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'wikimedia set index article'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'contains', 'o': 'typhoon'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; contains word >

 Q: othello has been translated into Answer editions
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'othello', 'p': 'editions', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'translated'}}
 TEMPLATE: <S P ?O ; ?O instanceOf Type>

 Q: the son of master lou harrison is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'son', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'lou harrison', 'p': 'master', 'o': '$y0'}}
 TEMPLATE: E REF xF . xF RFG ?G

 Q: there are Answer items are narrated by tom kenny
 SPARQL: lol
 ALIST: {'h': 'count', 'v': 'Answer', 's': 'Answer', 'p': 'narrated by', 'o': 'tom kenny'}
 TEMPLATE: Count ent (ent-pred-obj)

 Q: the sister or brother of portrait of flaying of marsyas is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'sister', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'flaying of marsyas', 'p': 'portrait of', 'o': '$y0'}}
 TEMPLATE: C RCD xD . xD RDE ?E

 Q: the agent which had conflict with lowell english is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': '$y0', 'p': 'agent', 'o': 'Answer', '$y0': {'h': 'value', 'v': '$y0', 's': 'lowell english', 'p': 'conflict', 'o': '$y0'}}
 TEMPLATE: C RCD xD . xD RDE ?E

 Q: the federation which has the highest median income is Answer
 SPARQL: lol
 ALIST: {'h': 'max', 'v': '$y0', 's': 'Answer', 'p': 'median income', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'federation'}}
 TEMPLATE: ?E is_a Type, ?E pred Obj  value. MAX/MIN (value)

 Q: the non-metropolitan county which shares a border with hampshire is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'Answer', 'p': 'border', 'o': 'hampshire', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'non-metropolitan county'}}
 TEMPLATE: <?S P O ; ?S InstanceOf Type>

 Q: the archive for archives at of the walt disney company is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': 'Answer', 's': 'disney', 'p': 'archives at', 'o': 'Answer', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'archives'}}
 TEMPLATE: <S P ?O ; ?O instanceOf Type>

 Q: the george washington military rank in 1796 is Answer
 SPARQL: lol
 ALIST: {'h': 'value', 'v': 'Answer', 's': 'george washington', 'p': 'military rank', 'o': 'Answer', 't': '1796'}
 TEMPLATE: (E pred F) prop ?value

 Q: it is Answer that lighthouse range of south channel pile light less than 2.4
 SPARQL: lol
 ALIST: {'h': 'less', 'v': 'Answer', 's': 'south channel pile light', 'p': 'lighthouse range', 'o': 'Answer', 'Answer': '2.4'}
 TEMPLATE: ASK ?sbj ?pred ?obj filter ?obj = num

 Q: the itime of the day that has the minimum time index in a day is Answer
 SPARQL: lol
 ALIST: {'h': 'min', 'v': '$y0', 's': 'Answer', 'p': 'time index', 'o': '$y0', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'time of the day'}}
 TEMPLATE: ?E is_a Type. ?E pred Obj. ?E-secondClause value. MIN (value)

 Q: the military operation which start with the letter o is Answer
 SPARQL: lol
 ALIST: {'h': 'list', 'v': '?x0,?x1', 's': 'Answer', 'p': 'label', 'o': '?x1', 'Answer': {'h': 'value', 'v': 'Answer', 's': 'Answer', 'p': 'type', 'o': 'military operation'}, '?x1': {'h': 'value', 'v': '?x1', 's': '?x1', 'p': 'starts_with', 'o': 'o'}}
 TEMPLATE: <?S P O ; ?S instanceOf Type ; starts with character >
